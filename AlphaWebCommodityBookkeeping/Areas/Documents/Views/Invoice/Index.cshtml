@{
    ViewBag.Title = "Index";
}



@*Printanje iz firefoxa
http://www.devexpress.com/Support/Center/p/Q476453.aspx*@


<script type="text/javascript">
//<![CDATA[
    var callbackInitDate;
    var command;

    $(document).ready(function () {
        $("*").css("cursor", "default");

        if ('@System.Web.HttpContext.Current.Session["CashBoxCodes"]' != "") {
            $('#gvInvoiceRateGrid').show();
            $('#new').show();
        }
        else {
            $('#gvInvoiceRateGrid').hide();
            $('#new').hide();
        }

    });

    function OnStartCallback(s, e) {

    }
    function OnEndCallback(s, e) {

    }
    function Print(id) {
        var actionURL = '@Url.Content("~/Documents/Invoice/Print")';
        $.post(actionURL + '/' + id, function (result) {
            //ReportViewer1.Refresh(); // ovo u biti ne treba
            ReportViewer1.Print();
        });
    }
    function RowClicked(s, e) {
        Cursor();
        //var id = s.keys[e.visibleIndex];
        var vi = e.visibleIndex - s.pageIndex * s.pageRowSize;
        var id = s.keys[vi];
        var actionURL = '@Url.Content("~/Documents/Invoice/CreateAndEdit/")' + id;
        window.location = actionURL;
    }

    var glId;
    var glstatusId;
    function Status(id, statusId) {
        glId = id;
        popupStatus.Show();
        rbl_Init();
    }
    function rbl_Init() {
        if (glId != undefined) {
            //var actionURL = '@Url.Content("~/Documents/Invoice/GetStatus/")';
            //$.post(actionURL, { id: glId, statusId: checkBoxList1.GetValue() }, function (result) {
            //    if (result.Item1 == true) {
            //        ShowHideRadio(result.Item2);
            ShowHideRadio(glstatusId);
            //}
            //})
        }
    }

    function ShowHideRadio(id, status)
        //function ShowHideRadio()
    {
        // Otvoren
        // Poslan
        // Odbijen
        // Zatvoren
        // Obrisan
        glId = id;
        switch (status) {
            case "0": // otvoren
                $('#tejbl').show();
                $('#checkBoxList1_RB0').hide();
                $('#checkBoxList1_RB1').show();
                $('#checkBoxList1_RB2').show();
                $('#checkBoxList1_RB3').show();
                $('#checkBoxList1_RB4').hide();
                break;
            case "1": // poslan
                $('#tejbl').show();
                $('#checkBoxList1_RB0').hide();
                $('#checkBoxList1_RB1').hide();
                $('#checkBoxList1_RB2').show();
                $('#checkBoxList1_RB3').show();
                $('#checkBoxList1_RB4').hide();
                break;
            case "3": // odbijen
                $('#tejbl').show();
                $('#checkBoxList1_RB0').show();
                $('#checkBoxList1_RB1').hide();
                $('#checkBoxList1_RB2').hide();
                $('#checkBoxList1_RB3').hide();
                $('#checkBoxList1_RB4').hide();
                break;
            case "4": // zatvoren
                $('#tejbl').hide();
                $('#checkBoxList1_RB0').hide();
                $('#checkBoxList1_RB1').hide();
                $('#checkBoxList1_RB2').hide();
                $('#checkBoxList1_RB3').hide();
                $('#checkBoxList1_RB4').hide();
                break;
            case "5": // obrisan
                $('#tejbl').show();
                $('#checkBoxList1_RB0').show();
                $('#checkBoxList1_RB1').hide();
                $('#checkBoxList1_RB2').hide();
                $('#checkBoxList1_RB3').hide();
                $('#checkBoxList1_RB4').hide();
                break;
        }
        checkBoxList1.SetValue(-1);
        if (status != 4) {
            popupStatus.Show();
        }

    }

    function ChangeStatus(s, e) {

        if (glId != undefined) {
            var actionURL = '@Url.Content("~/Documents/Invoice/SetStatus/")';
            $.post(actionURL, { id: glId, statusId: checkBoxList1.GetValue() }, function (result) {
                if (result == true) {
                    //s.SetValue(result.Item2);
                    //checkBoxList1.SetValue(result.Item2);
                    popupStatus.Hide();
                    gvInvoiceRateGrid.Refresh();
                }
            })
        }
    }

    function Delete(id) {
        var a = confirm('Da li stvarno želite obrisati?');
        if (a) {
            var actionURL = '@Url.Content("~/Documents/Invoice/SetStatus/")';
            $.post(actionURL, { id: id, statusId: 5 }, function (result) {
                if (result == true) {
                    gvInvoiceRateGrid.Refresh();
                }
            });
        }
    }

    function CashBoxChanged() {
        var url = '@Url.Content("~/Documents/Invoice/CashBoxChanged")';
        var cashbox = cbCashBox.GetValue();
        $.post(url, { cashbox: cashbox }, function () {
            gvInvoiceRateGrid.Refresh();
            $('#gvInvoiceRateGrid').show();
            $('#new').fadeIn();
            @*if ('@ViewData["FiscalMode"]' == "0") {
                $('#notDialog').fadeIn();
            }*@
        })
    }
    function CashBoxSetValue() {
        // locationCode / blagajnaCode
        if ('@System.Web.HttpContext.Current.Session["CashBoxCodes"]' != "") {
            cbCashBox.SetValue('@System.Web.HttpContext.Current.Session["CashBoxCodes"]');
            $('#imgOk').fadeIn('slow');
        }
    }
    // ]]>
</script>

@Html.Hidden("linkName", "KomercijalaParent")
@Html.Hidden("linkId", "InvoiceSpan")


@{
    int companyId = ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId;
    DalEf.MDGeneralEntities contextGeneral = new DalEf.MDGeneralEntities();
}


<h2 class="pt"> Računi </h2>
<a class="butPrimary " href="@Url.Content("~/Documents/Invoice/CreateAndEdit/0")">
<span> Novi račun </span>
</a>
<div class="clearb"></div>  
  


 <table width="100%" border="0" class="striped">
            <tr style="background-color: lightgray">
                <td width="70%">&nbsp;Molimo odaberite lokaciju i blagajnu</td>
                <td width="30%">
                    @Html.DevExpress().ComboBox(settings =>
               {
                   settings.Name = "cbCashBox";
                   settings.Properties.ValueType = typeof(string);
                   settings.Width = 300;

                   var lokacije = contextGeneral.MDGeneral_Enums_Location.Where(p => p.CompanyUsingServiceId == companyId);
                   string t = "";
                   string v = "";
                   if (lokacije != null)
                   {
                       foreach (var lokac in lokacije)
                       {
                           if (contextGeneral.MDGeneral_Enums_CashBox.SingleOrDefault(p => p.LocationId == lokac.Id) != null)
                           {

                               if (contextGeneral.MDGeneral_Enums_CashBox.Where(p => p.LocationId == lokac.Id).Count() > 1)
                               {
                                   var blagajneZaLokaciju = contextGeneral.MDGeneral_Enums_CashBox.Where(p => p.LocationId == lokac.Id);
                                   foreach (var bl in blagajneZaLokaciju)
                                   {
                                       t = lokac.Code.ToString() + "/" + bl.Code;
                                       v = t + "/" + lokac.Id.ToString() + "/" + bl.Id;
                                       settings.Properties.Items.Add(t, v);
                                   }
                               }
                               else
                               {
                                   t = lokac.Code.ToString() + "/" + contextGeneral.MDGeneral_Enums_CashBox.SingleOrDefault(p => p.LocationId == lokac.Id).Code;
                                   var bId = contextGeneral.MDGeneral_Enums_CashBox.SingleOrDefault(p => p.LocationId == lokac.Id).Id;
                                   v = t + "/" + lokac.Id.ToString() + "/" + bId;
                                   settings.Properties.Items.Add(t, v);
                               }
                           }

                       }
                       settings.Properties.ClientSideEvents.ValueChanged = "CashBoxChanged";
                       settings.Properties.ClientSideEvents.Init = "CashBoxSetValue";
                   }
                   settings.ShowModelErrors = false;
               }).GetHtml()

                </td>
            </tr>
        </table>

  
@Html.Partial("InvoiceGridPartial")


 <div id="mailDiv" style="display:none">
       
    @Html.DevExpress().ReportToolbar(
            settings =>
            {
                settings.Name = "ReportToolbarPrint";
                settings.ReportViewerName = "ReportViewer1";
                
            }
        ).GetHtml()

     
            @Html.Partial("InvoiceReportPartial", ViewData["Report"], new ViewDataDictionary() { { "InvoiceId", 0 } })  
  
       
 </div> 




 @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "popupStatus";
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.OuterMouseClick;
            settings.EnableAnimation = true;
            settings.HeaderText = "Status";
            settings.Width = 200;
            settings.Modal = false;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.AutoUpdatePosition = true;
            settings.SetContent(() =>
            {
                //ViewContext.Writer.Write("<table id=\"tejbl\" width=\"100%\"><tr><td width=\"100%\">");
                
                
                
                @Html.DevExpress().RadioButtonList(settingss => {
                settingss.Name = "checkBoxList1";



                settingss.Properties.Items.Add("Otvoren", (short)BusinessObjects.Common.Status.Otvoren);
                settingss.Properties.Items.Add("Poslan", (short)BusinessObjects.Common.Status.Poslan);
                settingss.Properties.Items.Add("Zatvoren", (short)BusinessObjects.Common.Status.Zatvoren);
                settingss.Properties.Items.Add("Odbijen", (short)BusinessObjects.Common.Status.Odbijen);
                settingss.Properties.Items.Add("Obrisan", (short)BusinessObjects.Common.Status.Obrisan);
                settingss.Properties.ValueType = typeof(Int32);
                //settingss.Properties.ValueField = "ID";
                //settingss.Properties.TextField = "Name";
                //settingss.Properties.RepeatLayout = options.RepeatLayout;
                //settingss.Properties.RepeatDirection = options.RepeatDirection;
                //settingss.Properties.RepeatColumns = options.RepeatColumns; 
                //settingss.Properties.ClientSideEvents. = "function(s, e) { rbl_Init(s, e); }"; 
                settingss.Properties.ClientSideEvents.SelectedIndexChanged = "function(s, e) { ChangeStatus(s, e); }";
                
            }).GetHtml();
                //ViewContext.Writer.Write("</td></tr><tr><td width=\"100%\"><a class=\"butMedium green\" onclick=\"ChangeStatus()\" href=\"#\"><span>Snimi</span></a></td></tr></table>");
               
            });
        }).GetHtml()


        