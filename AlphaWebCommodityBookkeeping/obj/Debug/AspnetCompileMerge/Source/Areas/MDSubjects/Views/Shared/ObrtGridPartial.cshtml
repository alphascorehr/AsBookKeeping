@model BusinessObjects.MDSubjects.cMDSubjects_Obrt
@using System.Data

@*@Html.DevExpress().GridView(
        settings =>
            {
                settings.Name = "gvObrtGrid";
                settings.CallbackRouteValues = new { Controller = "Obrt", Action = "ObrtGridPartial" };

                settings.Columns.Add(column =>
                {
                    column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink("Uredi", "CreateAndEdit", new { Id = DataBinder.Eval(c.DataItem, "Id") }) + "&nbsp" +
                            Html.ActionLink("Obriši", "CreateAndEdit", new { Id = DataBinder.Eval(c.DataItem, "Id") },
                                new { onclick = "return confirm('Da li stvarno želite obrisati?')" })
                        );
                    });
                    column.SetHeaderTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            Html.ActionLink("Novi obrt", "CreateAndEdit", new { Id = 0 }).ToHtmlString()
                        );
                    });

                    column.Settings.AllowDragDrop = DevExpress.Utils.DefaultBoolean.False;
                    column.Settings.AllowSort = DevExpress.Utils.DefaultBoolean.False;
                    column.Width = 70;
                });
                
                settings.KeyFieldName = "Id";

                settings.Settings.ShowFilterRow = false;
                settings.Settings.ShowGroupPanel = false;
                settings.Settings.ShowFooter = false;

                settings.Columns.Add("OIB", "OIB", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add("JMBG", "Jmbg" , DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add("ImeVlasnika", "Ime vlasnika", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add("PrezimeVlasnika", "Prezime vlasnika", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);

               
                settings.ClientSideEvents.BeginCallback = "function(s, e) { OnStartCallback(s, e); }";
                settings.ClientSideEvents.EndCallback = "function(s, e) { OnEndCallback(s, e); }";

            }).BindToLINQ("", "", new
                        EventHandler<DevExpress.Data.Linq.LinqServerModeDataSourceSelectEventArgs>((s, e) =>
                        {
                            e.KeyExpression = "Id";
                            DalEf.MDSubjectsEntities context = new DalEf.MDSubjectsEntities();
                            e.QueryableSource = context.MDSubjects_Subject.OfType<DalEf.MDSubjects_Obrt>().Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId);
                        })).GetHtml()*@



@Html.DevExpress().GridView(
        settings =>
            {
                settings.Name = "gvObrtGrid";
                settings.CallbackRouteValues = new { Controller = "Obrt", Action = "ObrtGridPartial" };
                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                settings.CommandColumn.Visible = true;
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.CommandColumn.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
                settings.CommandColumn.ClearFilterButton.Image.Url = @Url.Content("~/Content/images/clear.png");
                settings.CommandColumn.ClearFilterButton.Image.ToolTip = "Očisti rezultate pretrage";
                settings.CommandColumn.ClearFilterButton.Visible = true;
                
                settings.Columns.Add(column =>
                {
                    column.Caption = "";
                    column.SetDataItemTemplateContent(c =>
                    {
                        var subjectType = DataBinder.Eval(c.DataItem, "SubjectType");

                        switch ((short)subjectType)
                        {
                            case (short)BusinessObjects.Common.SubjectType.Person:
                                {
                                    ViewContext.Writer.Write(
                                       //Html.ActionLink("Uredi", "CreateAndEdit", "Person", new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "gridEditButton" }) + "&nbsp" +
                                       Html.ActionLink("Obriši", "Delete", "Person", new { Id = DataBinder.Eval(c.DataItem, "Id") },
                                           new { onclick = "return confirm('Da li stvarno želite obrisati?')", @class = "gridDelButton" })
                                   );
                                    break;
                                }

                            case (short)BusinessObjects.Common.SubjectType.Obrt:
                                {
                                    ViewContext.Writer.Write(
                                       //Html.ActionLink("Uredi", "CreateAndEdit", "Obrt", new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "gridEditButton" }) + "&nbsp" +
                                       Html.ActionLink("Obriši", "Delete", "Obrt", new { Id = DataBinder.Eval(c.DataItem, "Id") },
                                           new { onclick = "return confirm('Da li stvarno želite obrisati?')", @class = "gridDelButton" })
                                   );
                                    break;
                                }

                            case (short)BusinessObjects.Common.SubjectType.Company:
                                {
                                    ViewContext.Writer.Write(
                                       //Html.ActionLink("Uredi", "CreateAndEdit", "Company", new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "gridEditButton" }) + "&nbsp" +
                                       Html.ActionLink("Obriši", "Delete", "Company", new { Id = DataBinder.Eval(c.DataItem, "Id") },
                                           new { onclick = "return confirm('Da li stvarno želite obrisati?')", @class = "gridDelButton" })
                                   );
                                    break;
                                }
                                
                                 case (short)BusinessObjects.Common.SubjectType.SoleProprietor:
                                {
                                    ViewContext.Writer.Write(
                                       //Html.ActionLink("Uredi", "CreateAndEdit", "SoleProprietor", new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "gridEditButton" }) + "&nbsp" +
                                       Html.ActionLink("Obriši", "Delete", "SoleProprietor", new { Id = DataBinder.Eval(c.DataItem, "Id") },
                                           new { onclick = "return confirm('Da li stvarno želite obrisati?')", @class = "gridDelButton"  })
                                   );
                                    break;
                                }
                        }
                      
                    });
                    //column.SetHeaderTemplateContent(c =>
                    //{
                    //    ViewContext.Writer.Write(
                    //        Html.ActionLink("Novi obrt", "CreateAndEdit", new { Id = 0 }).ToHtmlString()
                    //    );
                    //});

                    column.Settings.AllowDragDrop = DevExpress.Utils.DefaultBoolean.False;
                    column.Settings.AllowSort = DevExpress.Utils.DefaultBoolean.False;
                    column.Width = 20;
                });
                
                settings.KeyFieldName = "Id";

               

                //settings.Columns.Add("Name", "Name", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add(column =>
                {
                    column.FieldName = "Name";
                    column.Caption = "Naziv";
                    column.SetDataItemTemplateContent(c =>
                    {
                        var subjectType = DataBinder.Eval(c.DataItem, "SubjectType");

                        switch ((short)subjectType)
                        {
                            case (short)BusinessObjects.Common.SubjectType.Person:
                                {
                                    ViewContext.Writer.Write(
                             "<a onclick=\"Cursor();\" href=" + @Url.Content("~/MDSubjects/Person/CreateAndEdit/" + DataBinder.Eval(c.DataItem, "Id")) + ">" + DataBinder.Eval(c.DataItem, "Name") + "</a>");
                                    break;
                                }

                            case (short)BusinessObjects.Common.SubjectType.Obrt:
                                {
                                    ViewContext.Writer.Write(
                            "<a onclick=\"Cursor();\" href=" + @Url.Content("~/MDSubjects/Obrt/CreateAndEdit/" + DataBinder.Eval(c.DataItem, "Id")) + ">" + DataBinder.Eval(c.DataItem, "Name") + "</a>");
                                    break;
                                }

                            case (short)BusinessObjects.Common.SubjectType.Company:
                                {
                                    ViewContext.Writer.Write(
                            "<a onclick=\"Cursor();\" href=" + @Url.Content("~/MDSubjects/Company/CreateAndEdit/" + DataBinder.Eval(c.DataItem, "Id")) + ">" + DataBinder.Eval(c.DataItem, "Name") + "</a>");
                                    break;
                                }

                            case (short)BusinessObjects.Common.SubjectType.SoleProprietor:
                                {
                                    ViewContext.Writer.Write(
                             "<a onclick=\"Cursor();\" href=" + @Url.Content("~/MDSubjects/SoleProprietor/CreateAndEdit/" + DataBinder.Eval(c.DataItem, "Id")) + ">" + DataBinder.Eval(c.DataItem, "Name") + "</a>");
                                    break;
                                }
                        }
                            
                        
                    });
                });
                settings.Columns.Add("SubjectTypeText", "Vrsta", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add("Oib", "OIB", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);

                settings.HtmlRowCreated = (sender, e) =>
                {
                    if (e.RowType == DevExpress.Web.ASPxGridView.GridViewRowType.Data)
                    {
                        e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor='#eeeeee';");
                        e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor='white';");
                    }
                };
               
                settings.ClientSideEvents.BeginCallback = "function(s, e) { OnStartCallback(s, e); }";
                settings.ClientSideEvents.EndCallback = "function(s, e) { OnEndCallback(s, e); }";

            }).BindToLINQ("", "", new
                        EventHandler<DevExpress.Data.Linq.LinqServerModeDataSourceSelectEventArgs>((s, e) =>
                        {
                            e.KeyExpression = "Id";
                            DalEf.MDSubjectsEntities context = new DalEf.MDSubjectsEntities();
                            e.QueryableSource = context.vCustomers.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && p.Inactive == false);
                        })).GetHtml()