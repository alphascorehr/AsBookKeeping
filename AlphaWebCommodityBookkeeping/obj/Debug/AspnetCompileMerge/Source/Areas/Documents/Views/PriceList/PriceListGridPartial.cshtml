@using System.Data

@{
    DalEf.DocumentsEntities context = new DalEf.DocumentsEntities();
    var data = context.vPriceList.OrderByDescending(p => p.Id).Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && !p.IsDefault);
    }


@Html.DevExpress().GridView(
        settings =>
            {
                settings.Name = "gvPriceListGrid";
                settings.CallbackRouteValues = new { Controller = "PriceList", Action = "PriceListGridPartial" };
                settings.SettingsLoadingPanel.Text = "Učitavanje";

                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                settings.SettingsPager.Summary.Text = "Stranica {0} od {1} ({2} reda)";
                settings.SettingsText.EmptyDataRow = "Nema podataka";
                settings.Settings.ShowFilterRow = true;
                settings.Settings.ShowFilterRowMenu = true;
                settings.SettingsPager.PageSize = 13;
                settings.CommandColumn.Visible = true;
                settings.CommandColumn.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
                settings.CommandColumn.ClearFilterButton.Image.Url = @Url.Content("~/Content/images/clear.png");
                settings.CommandColumn.ClearFilterButton.Image.ToolTip = "Očisti rezultate pretrage";
                settings.CommandColumn.ClearFilterButton.Visible = true;
                
                settings.Columns.Add(column =>
                {
                    //column.Caption = "#";
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(

                            //Html.ActionLink("Uredi", "CreateAndEdit", new { Id = DataBinder.Eval(c.DataItem, "Id") }, new { @class = "gridEditButton" }) + "&nbsp" +
                            Html.ActionLink("Obriši", "CreateAndEdit", new { Id = DataBinder.Eval(c.DataItem, "Id") },
                                new { onclick = "return confirm('Da li stvarno želite obrisati?')", @class = "gridDelButton" })
                        );
                    });
                    //column.SetHeaderTemplateContent(c =>
                    //{
                    //    ViewContext.Writer.Write(
                    //        Html.ActionLink("Novi cjenik", "CreateAndEdit", new { Id = 0 }).ToHtmlString()
                    //    );
                    //});
                    column.Settings.AllowDragDrop = DevExpress.Utils.DefaultBoolean.False;
                    column.Settings.AllowSort = DevExpress.Utils.DefaultBoolean.False;
                    column.Width = 40;
                });
                
                settings.KeyFieldName = "Id";

                //settings.Settings.ShowFilterRow = false;
                //settings.Settings.ShowGroupPanel = false;
                //settings.Settings.ShowFooter = false;

                //settings.Columns.Add("UniqueIdentifier", "Redni broj", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add(column =>
                {
                    column.FieldName = "UniqueIdentifier";
                    column.Caption = "Cjenik";
                    column.Width = 90;
                    column.SetDataItemTemplateContent(c =>
                    {
                        ViewContext.Writer.Write(
                            "<a onclick=\"Cursor();\" href=" + @Url.Content("~/Documents/PriceList/CreateAndEdit/" + DataBinder.Eval(c.DataItem, "Id")) + ">" + DataBinder.Eval(c.DataItem, "UniqueIdentifier") + "</a>"
                        );
                    });

                });
                settings.Columns.Add("Klijent", "Klijent", DevExpress.Web.Mvc.MVCxGridViewColumnType.TextBox);
                settings.Columns.Add("Naziv", "Naziv", DevExpress.Web.Mvc.MVCxGridViewColumnType.DateEdit);
                //settings.Columns.Add("DateStart", "Vrijedi od", DevExpress.Web.Mvc.MVCxGridViewColumnType.DateEdit);

                settings.Columns.Add(column =>
                {
                    column.FieldName = "DateStart";
                    column.Caption = "Vrijedi od";
                    column.Width = 95;
                    column.ColumnType = DevExpress.Web.Mvc.MVCxGridViewColumnType.DateEdit;
                    column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                    var dateEditproperties = column.PropertiesEdit as DateEditProperties;
                    dateEditproperties.DisplayFormatString = "dd.MM.yyyy";

                });

                //settings.Columns.Add("DateEnd", "Vrijedi do", DevExpress.Web.Mvc.MVCxGridViewColumnType.DateEdit);

                settings.Columns.Add(column =>
                {
                    column.FieldName = "DateEnd";
                    column.Caption = "Vrijedi do";
                    column.Width = 95;
                    column.ColumnType = DevExpress.Web.Mvc.MVCxGridViewColumnType.DateEdit;
                    column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
                    var dateEditproperties = column.PropertiesEdit as DateEditProperties;
                    dateEditproperties.DisplayFormatString = "dd.MM.yyyy";

                });



                settings.HtmlRowCreated = (sender, e) =>
                {
                    if (e.RowType == DevExpress.Web.ASPxGridView.GridViewRowType.Data)
                    {
                        e.Row.Attributes.Add("onmouseover", "this.style.backgroundColor='#eeeeee';");
                        e.Row.Attributes.Add("onmouseout", "this.style.backgroundColor='white';");
                    }
                };
                

               
                settings.ClientSideEvents.BeginCallback = "function(s, e) { OnStartCallback(s, e); }";
                settings.ClientSideEvents.EndCallback = "function(s, e) { OnEndCallback(s, e); }";

          @*  }).BindToLINQ("", "", new
                        EventHandler<DevExpress.Data.Linq.LinqServerModeDataSourceSelectEventArgs>((s, e) =>
                        {
                            e.KeyExpression = "Id";
                            DalEf.DocumentsEntities context = new DalEf.DocumentsEntities();
                            e.QueryableSource = context.vPriceList.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && !p.IsDefault);
                        })).GetHtml()
                        
*@
    }).Bind(data).GetHtml()