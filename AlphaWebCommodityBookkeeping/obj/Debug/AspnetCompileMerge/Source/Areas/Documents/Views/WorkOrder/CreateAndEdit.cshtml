@model BusinessObjects.Documents.cDocuments_WorkOrder

@{
    ViewBag.Title = "CreateAndEdit";
    //DalEf.DocumentsEntities contextDoc = new DalEf.DocumentsEntities();
    DalEf.MDSubjectsEntities context = new DalEf.MDSubjectsEntities();
    DalEf.ProjectsEntities contextProj = new DalEf.ProjectsEntities();
    DalEf.MDEntitiesEntities contextEnt = new DalEf.MDEntitiesEntities();
    var itemsProject = (from p in contextProj.Projects_Project
                        where (p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId)
                        select new { p.Id, p.Name });

    //var itemDoc = contextDoc.Documents_Document.OfType<DalEf.Documents_WorkOrder>().SingleOrDefault(p => p.Id == Model.Id);
    //var InvoicedDoc = itemDoc.Documents_InvoiceId;
    //if(InvoicedDoc != null)
    //{
    //    var Invoice = contextDoc.Documents_Document.FirstOrDefault(p => p.Id == InvoicedDoc);
    //    var InvoiceDocNumber = Invoice.UniqueIdentifier;
    //}
               
}

@if (false)
{ 
        <script src="~/Scripts/jquery-1.6.4-vsdoc.js" type="text/javascript"></script>
        <script src="~/Scripts/jquery.validate-vsdoc.js" type="text/javascript"></script>
}

<script type="text/javascript">

    $(window).bind('beforeunload', function () {
        if ('@ViewData["Action"]' == "locked") {
            return;
        }
        //if (AreControlsModifiedVar)
        //{
        //    return "No pressure, but check out the important announcement in the middle of the screen?";
        //}

        //return "Good bye";
        var url = '@Url.Content("~/Documents/WorkOrder/unlockTheDoc")';
        $.post(url, function (result) {
            return "Url is about to be changed, kill the lock";
        });

    });


    function noUnload() {
        $(window).unbind('beforeunload');
    }


    $.validator.setDefaults({
        submitHandler: function () {
            document.myForm.submit();
        }
    });
    var icustomer;
    var initValues = new Array(); /* Step 1. - define global scope array */
    var invoiced;
    var invoicedId;
    var materialAdding;
    var timeAdding;
    var coppied;
    var coppiedId;
    var AreControlsModifiedVar = false;
    $(document).ready(function () {

        initValues = GetValues(); /* Step 2. - get initial values from controls */

        // validate signup form on keyup and submit
        $("#myForm").validate({
            rules: {
                MDSubjects_SubjectId: "required",
                UniqueIdentifier: "required"
            },
            messages: {
                MDSubjects_SubjectId: "Obavezno polje",
                UniqueIdentifier: "Obavezno polje"
            }
        });
        $("#myFormCli").validate({
            rules: {
                ClientName: "required",
                SubjectType: "required",
                Mjesta3: "required",
                UlicaBroj: "required",
                ClientOIB: "required"
            },
            messages: {
                ClientName: "Obavezno polje",
                SubjectType: "Obavezno polje",
                Mjesta3: "Obavezno polje",
                UlicaBroj: "Obavezno polje",
                ClientOIB: "Obavezno polje"
            }

        });
        $("#myFormPro").validate({
            rules: {
                ProductName: "required",
                Label: "required",
                TaxRateId: "required",
                UnitId: "required",
                WholesalePrice: "required"
            },
            messages: {
                ProductName: "Obavezno polje",
                Label: "Obavezno polje",
                TaxRateId: "Obavezno polje",
                UnitId: "Obavezno polje",
                WholesalePrice: "Obavezno polje"
            }

        });
        $("#myFormSrv").validate({
            rules: {
                ServiceLabel: "required",
                ServiceName: "required",
                ServiceTaxRateId: "required",
                ServiceUnitId: "required",
                WholesalePriceSrv: "required"
            },
            messages: {
                ServiceLabel: "Obavezno polje",
                ServiceName: "Obavezno polje",
                ServiceTaxRateId: "Obavezno polje",
                ServiceUnitId: "Obavezno polje",
                WholesalePriceSrv: "Obavezno polje"
            }

        });

        $("#accordion").accordion();


        var rez = IsVerified.GetValue();
        IsVerifiedRules(rez);
        SubjectIdChanged();
        $('#CreateDocInvoiceImg').show();
        invoiced = '@Model.Invoiced';
        invoicedId = '@Model.Documents_InvoiceId';
        ShowDocDiv();

        if ('@ViewData["Action"]' == "print") {
            ShowPrint(); /* The document was silently saved, show the report */
        }
        else if ('@ViewData["Action"]' == "locked") {
            alert(lockText);
            //window.location.replace('@Url.Content("~/Documents/WorkOrder/Index")');
            window.history.back(-1);
        }
        

//        var id = '@Model.Id';
//        if (id == 0) {
//            $('#MailPrint').hide();
//        }

        $("#dialog").dialog({
            autoOpen: false,
            modal: true,
            buttons: {
                "Da": function () {
                    $(this).dialog("close");
                    CreateDoc(docAction);
                },
                "Ne": function () {
                    $(this).dialog("close");
                }
            }

        });
        /* End of Document ready */
    });
    var docAction;
    function jqConfirm(docType) {
        docAction = docType;
        $("#myForm").validate();
        var v = $("#myForm").valid();

        if (v) {
            var text = "";
            switch (docType) {
                case "genInvoice":
                    text = "Da li želite kreirati račun iz radnog nalog br. " + '@Model.UniqueIdentifier' + "?"
                    break;
                case "genCopy":
                    text = "Da li želite kopirati radni nalog br. " + '@Model.UniqueIdentifier' + "?"
                    break;
            }
            $('#dialogtext').text(text);
            $("#dialog").dialog("open");
        }
    } 

    function ShowDocDiv() {
        var div = $('#GeneratedDocsDiv');
        var id = '@Model.Id';
        if (id == 0) { $('#CreateDocOfferImg').hide(); }
        var link;
        if (invoiced == "True") {
            $('#invDiv').show();
            link = '@Url.Content("~/Documents/Invoice/CreateAndEdit/")' + invoicedId;
            $('#invoice').attr('href', link);
            $('#CreateDocInvoiceImg').hide();
            div.fadeIn('slow');
        }
        var a = '@ViewData["Action"]';
        if (coppied == "True" || a.indexOf("_") != -1) {
            if (a.indexOf("_") != -1) { coppiedId = a.split("_")[1]; }

            $('#copyDiv').show();
            link = '@Url.Content("~/Documents/WorkOrder/CreateAndEdit/")' + coppiedId;
            $('#copy').attr('href', link);
            div.fadeIn('slow');
        }
    }

    function CreateDoc(docType) {
        AreControlsModified();
        
        //if (v){
            if (AreControlsModifiedVar || isGridModified) {
                $('#HiddenValueAction').attr('value', docType);
                Cursor();
                document.myForm.submit();
                return false;
            }
            else {
                var Id = parseInt($('#Id').attr('value'));
                var actionURL = '@Url.Content("~/Documents/WorkOrder/CreateDoc")';
                $.post(actionURL, { FromDocumentId: Id, docType: docType }, function (result) {
                    if (docType == 'genInvoice') {
                        invoicedId = result;
                        invoiced = 'True';
                        ShowDocDiv();
                    }
                    else {
                        coppied = "True";
                        coppiedId = result;
                        ShowDocDiv();
                    }

                });
            }
        
        //}
     }

    function IsVerifiedChanged(s,e){
        var rez = s.GetValue();

        IsVerifiedRules(rez);
       
    }

    function IsVerifiedRules(isVerified){

      if (!isVerified)
        {
            VerifierName.SetValue('');
            VerifierPhone.SetValue('');

            VerifierName.enabled = false;
            VerifierPhone.enabled = false;

            $('#VerifierName_I, #VerifierName').css({'background-color':'LightGray'})
            $('#VerifierPhone_I, #VerifierPhone').css({'background-color':'LightGray'})
        }
        else
        {
            VerifierName.enabled = true;
            VerifierPhone.enabled = true;

            $('#VerifierName_I, #VerifierName').css({'background-color':'Transparent'})
            $('#VerifierPhone_I, #VerifierPhone').css({'background-color':'Transparent'})
        }
    }

    function IsBillableInit(s, e) {
        //s.SetValue(false);
    }

    function SubjectIdChanged(s, e) {
        /* SubjectId se trpa u Session */
        var SubjectId = parseInt($('#MDSubjects_SubjectId_VI').attr('value'));

        if (SubjectId == null || SubjectId == "" || SubjectId == "0" || isNaN(SubjectId)) {
            return false;
        }
        if (SubjectId != null) {
            var actionURL = '@Url.Content("~/Documents/WorkOrder/SubjectIdChanged")';
            $.post(actionURL, { subjectId: SubjectId }, function (result) {
                var oib = result[0];
                var ulica = result[1];
                var broj = result[2];
                var mjesto = result[3];
                var mjestoId = result[4];
                var mjestoNaziv = result[5];
                var adresa = ulica;
                if (oib == null) {
                    oib = "Nije unešen";
                }
                if (ulica == null) {
                    adresa = "Nije unešena";
                }
                if (mjesto == null) {
                    mjesto = "Nije unešeno";
                }
                $('#oib').html("OIB: " + oib)
                $('#ulica').html("Adresa: " + adresa);
                $('#mjesto').html("Mjesto: " + mjesto);

                //if (mjestoId != null && mjestoNaziv != null) {
                //    PlaceId.AddItem(mjestoNaziv, mjestoId);
                //    PlaceId.SetText(mjestoNaziv);
                //    PlaceId.SetValue(mjestoId);
                //}
            });
            $('#AdresaKlijentaDiv').slideDown('slow');
        }
        
    }

    function ProductIdChanged(s, e) {
        var ProizvodId = parseInt($('#gvMaterialTrackingCol_DXEditor2_VI').attr('value'));


        if (ProizvodId != null && $('#MDSubjects_SubjectId_VI').attr('value') != null && $('#MDSubjects_SubjectId_VI').attr('value') != 0 && $('#MDSubjects_SubjectId_VI').attr('value') != NaN) {
            var actionURL = '@Url.Content("~/Documents/WorkOrder/ProductIdChanged")';
            $.post(actionURL, { ProductId: ProizvodId }, function (result) {
                gvMaterialTrackingCol_DXEditor4.SetValue(result);
            });

        }
        else {
            alert("Molimo, odaberite klijenta");
        }
    }


    function MaterialOnEndCallback(s, e) {
        $('#gvMaterialTrackingCol_DXEditor0').css({ 'border': '0' })
        //$('#accordion').accordion('destroy').accordion();
        if (materialAdding == true) {
            gvMaterialTrackingCol_DXEditor6.SetValue(true);
            materialAdding = false;
        }

    }

    function TimeOnEndCallback(s, e) {
        $('#gvTimeTrackingCol_DXEditor0').css({ 'border': '0' })
        //$('#accordion').accordion('destroy').accordion();
        if (timeAdding == true) {
            gvTimeTrackingCol_DXEditor8.SetValue(true);
            timeAdding = false;
        }
    }


    /*
            Step 3. - And so it begins
    */

    function GetValues() {
        var list = new Array(MDSubjects_SubjectId, PlaceId, Projects_ProjectId, IsVerified, VerifierName, VerifierPhone, Distance, Description);
        var array = new Array();
        for (i = 0; i <= list.length - 1; i++) {
            //var val = $('#' + list[i]).attr('value');
            var val = list[i];
            array[i] = val.GetValue();
        }
        return array;
    }

    isGridModified = false;
    function Print() {
        $("#myForm").validate();
        var v = $("#myForm").valid();

        if (v) {
            if (AreControlsModified() || isGridModified) {
                $('#HiddenValueAction').attr('value', 'print');
                Cursor();
                document.myForm.submit();
            }
            else {
                ShowPrint();
            }
        }
    }

    
    function AreControlsModified() {
        //alert('AreControlsModified');
        var newValues = new Array();
        newValues = GetValues();

        for (i = 0; i <= newValues.length - 1; i++) {
            if (initValues[i] != newValues[i]) {
                //return true;
                AreControlsModifiedVar = true;
                //alert('mod');
                break;
            }
        }
        //return false;
        //AreControlsModifiedVar = false;
    }

    function OnStartCallback(s, e) {
        /* check if grid has been modified */
        if (e.command == "DELETEROW" || e.command == "UPDATEEDIT" || e.command == "ADDNEWROW") {
            isGridModified = true;
        }

        if (e.command == "ADDNEWROW") {
            if (s.name == "gvMaterialTrackingCol") {
                materialAdding = true;
            }
            else if (s.name == "gvTimeTrackingCol") {
                timeAdding = true;
            }
        }
        if (e.command == "STARTEDIT" || e.command == "ADDNEWROW") {
            gridInEdit = true;
            $('.button_large').attr('onclick', '');
            $('#genInvoice').attr('onclick', '');
            $('#genCopy').attr('onclick', '');
            $('#printLink').attr('onclick', '');

        }
        if (e.command == "CANCELEDIT" || e.command == "UPDATEEDIT") {
            gridInEdit = false;
            $('.button_large').attr('onclick', '$(this).closest("form").submit()');
            $('#genInvoice').attr('onclick', 'jqConfirm("genInvoice")');
            $('#genCopy').attr('onclick', 'jqConfirm("genCopy")');
            $('#printLink').attr('onclick', 'Print()');

        }
        
    }

    function ShowPrint() {
        //$('#workOrder2Invoice').hide();
        $('.footer').hide();
        $('#DefaultEmements').slideToggle('slow');
        $('#printDiv').slideToggle('slow');
        $('#printImg').hide();
        $('#mailImg').hide();

        $('#printLink').attr('onclick', 'ClosePrint()');
        $('#printImg').attr('title', 'Zatvori ispis dokumenta');
        $('#printImg').attr('src', '@Url.Content("~/Content/images/close.png")');
        $('#printImg').fadeIn('slow');
    }

    function ClosePrint() {
        $('#DefaultEmements').slideToggle('slow');
        $('#printDiv').slideToggle('slow');

        $('#printImg').hide();

        $('#printImg').attr('src', '@Url.Content("~/Content/images/Printer_Blue48.png")');

        $('#printLink').attr('onclick', 'Print()');
        $('#printImg').attr('title', 'Ispiši dokument');
        $('#printImg').fadeIn('slow');
        $('#mailImg').fadeIn('slow');
        //$('#workOrder2Invoice').fadeIn('slow');
        $('.footer').show();
    }

    /* That's it folks */



    function Mail() {
        $('#workOrder2Invoice').hide();
        $('#mailErr').hide();
        $('#mailOk').hide();
        var sub = "Radni nalog br. " + '@Model.UniqueIdentifier';

        var SubjectId = parseInt($('#MDSubjects_SubjectId_VI').attr('value'));
        if (SubjectId == null || SubjectId == "" || SubjectId == "0") {
            return false;
        }
//        var actionURL = '@Url.Content("~/Documents/WorkOrder/FindEmailById")';
//        $.post(actionURL, { subjectId: SubjectId }, function (result) {
//            SendTo.SetValue(result);
            Subject.SetValue(sub);
//        });
        $('.footer').hide();
        $('#DefaultEmements').slideToggle('slow');
        $('#mailDiv').slideToggle('slow');
        $('#printImg').hide();
        $('#mailImg').hide();


        $('#mailLink').attr('onclick', 'CloseMail()');
        $('#mailImg').attr('title', 'Zatvori slanje dokumenta');
        $('#mailImg').attr('src', '@Url.Content("~/Content/images/close.png")');
        $('#mailImg').fadeIn('slow');
    }

    function CloseMail() {
        $('#DefaultEmements').slideToggle('slow');
        $('#mailDiv').slideToggle('slow');

        $('#mailImg').hide();

        $('#mailImg').attr('src', '@Url.Content("~/Content/images/mail_send48.png")');


        $('#mailLink').attr('onclick', 'Mail()');
        $('#mailImg').attr('title', 'Pošalji dokument');
        $('#printImg').fadeIn('slow');
        $('#mailImg').fadeIn('slow');
        $('#workOrder2Invoice').fadeIn('slow');
        $('.footer').show();
    }

    function SendReportByEmail() {
        //Wait();
        $('#mailErr').hide();
        $('#mailOk').hide();
        var Id = parseInt($('#Id').attr('value'));
        if (Id == null || Id == "" || Id == "0") {
            return false;
        }

        var sendTo = SendTo.GetValue();
        var sendToCC = SendToCC.GetValue();
        var subject = Subject.GetValue();
        var body = Body.GetValue();
        var clientName = $('#MDSubjects_SubjectId_I').attr('value');
        if (clientName == null || clientName == "" || clientName == "0") {
            return false;
        }
        /* Id, SentTo, SendToCC, Subject, Body */
        var actionURL = '@Url.Content("~/Documents/WorkOrder/SendReportByEmail")';
        $.post(actionURL, { Id: Id, SendTo: sendTo, SendToCC: sendToCC, Subject: subject, Body: body, ClientName: clientName }, function (result) {
            if (result == "Ok") {
                $('#mailErr').hide();
                $('#mailOk').fadeIn('slow');
                $('#mailOkLabel').html(SendTo.GetValue());
            }
            else {
                $('#mailOk').hide();
                $('#mailErr').fadeIn('slow');
                $('#mailErrLabel').html(result.toString());
            }
            //$("*").css("cursor", "auto");
        });

    }


    function showClientPopup() {
        ClientName.SetValue("");
        ClientOIB.SetValue("");
        SubjectType.SetValue("");
        Mjesta3.SetValue("");
        UlicaBroj.SetValue("");
        pcModalModeCli.Show();
        Mjesta3.PerformCallback();
    }

    function AddClient() {
        var ClName = ClientName.GetValue();
        var ClOIB = ClientOIB.GetValue();
        var SubType = SubjectType.GetValue();
        var MjestoId = Mjesta3.GetValue();
        var Ulicabroj = UlicaBroj.GetValue();
         $("#myFormCli").validate();
        var v = $("#myFormCli").valid();

        if (v) {
            var actionUrl = '@Url.Content("~/MDSubjects/Company/AddClient")'
            $.post(actionUrl, { Name: ClName, OIB: ClOIB, SubjectType: SubType, Mjesto: MjestoId, UlicaBroj: Ulicabroj }, function (result) {
                var id = parseInt(result);
                //var id = 1000;
                if (id > 0) {
                    MDSubjects_SubjectId.AddItem(ClName, id);
                    MDSubjects_SubjectId.SetText(ClName);
                    pcModalModeCli.Hide();
                    SubjectIdChanged();
                }
            });
        }
    }
    function PopupSubjectTypeChanged() {
        var subType = SubjectType.GetValue();
        if (subType == 0) {
            $('#Oibdiv').removeClass('required');
            //$('#ClientOIB').rules("remove", "required");

        }
        else {
            $('#Oibdiv').addClass('required');
            //$('#ClientOIB').rules("add", "required");

        }
    }

    function showProductPopup() {
        ProductName.SetValue("");
        TaxRateId.SetValue("");
        WholesalePrice.SetValue("");
        Label.SetValue("");
        UnitId.SetValue("");
        pcModalMode.Show();
    }
    function showServicePopup() {
        ServiceName.SetValue("");
        ServiceTaxRateId.SetValue("");
        ServiceLabel.SetValue("");
        WholesalePriceSrv.SetValue("");
        ServiceUnitId.SetValue("");
        pcModalModeSrv.Show();
    }

    function AddProduct() {
        var Name = ProductName.GetValue();
        var Tax = TaxRateId.GetValue();
        var WSprice = WholesalePrice.GetValue();
        var Lbl = Label.GetValue();
        var Unit = UnitId.GetValue();

        $("#myFormPro").validate();
        var v = $("#myFormPro").valid();

        if (v) {
        //if (Name != null && Tax != null && WSprice != null && Label != null && Unit != null) {
            var actionUrl = '@Url.Content("~/MDEntities/Product/AddProduct")'
            $.post(actionUrl, { Name: Name, Tax: Tax, WSprice: WSprice, Label: Lbl, Unit: Unit }, function (result) {
                var id = parseInt(result);
                //var id = 1000;
                if (id > 0) {
                    gvMaterialTrackingCol.CancelEdit();
                    pcModalMode.Hide()
                }
            });
        }
    }

    function AddService() {
        var Name = ServiceName.GetValue();
        var Tax = ServiceTaxRateId.GetValue();
        var Label = ServiceLabel.GetValue();
        var Wsprice = WholesalePriceSrv.GetValue();
        var Unit = ServiceUnitId.GetValue();
        $("#myFormSrv").validate();
        var v = $("#myFormSrv").valid();

        if (v) {
        //if (Name != null && Tax != null && Label != null && Wsprice != null && Unit != null) {
            var actionUrl = '@Url.Content("~/MDEntities/Service/AddService")'
            $.post(actionUrl, { Name: Name, Tax: Tax, Wsprice: Wsprice, Unit: Unit }, function (result) {
                var id = parseInt(result);
                //var id = 1000;
                if (id > 0) {
                    gvTimeTrackingCol.CancelEdit();
                    pcModalModeSrv.Hide()
                }
            });
        }

    }

    var colGl;
    var idGl;
    function DescMat(id) {
        colGl = 'material';
        idGl = id;
        var actionUrl = '@Url.Content("~/Documents/WorkOrder/GetDesc")'
        $.post(actionUrl, { id: id, col: colGl }, function (result) { DescriptionDesc.SetValue(result) });
        pcModalModeDesc.Show();
    }

        function DescTime(id) {
            colGl = 'time';
            idGl = id;
            var actionUrl = '@Url.Content("~/Documents/WorkOrder/GetDesc")'
            $.post(actionUrl, { id: id, col: colGl }, function (result) { DescriptionDesc.SetValue(result) });
            pcModalModeDesc.Show();
    }

    function AddDesc() {
        var actionUrl = '@Url.Content("~/Documents/WorkOrder/AddDesc")'
        var memo = DescriptionDesc.GetText();
        $.post(actionUrl, { col: colGl, id: idGl, desc: memo }, function (result) {
            pcModalModeDesc.Hide();
            if (colGl == 'material') {
                gvMaterialTrackingCol.Refresh();
            }
            else {
                gvTimeTrackingCol.Refresh();
            }
        });
    }

</script>

@{
    string caption = "Novi radni nalog";
    if (Model.UniqueIdentifier != "")
    {
        caption = "Radni nalog br. " + Model.UniqueIdentifier;
    }
}

@using (Html.BeginForm("CreateAndEdit", "WorkOrder", FormMethod.Post, new { id = "myForm", name = "myForm" }))
{
    @Html.HiddenFor(model => model.Id);
    @Html.HiddenFor(model => model.EntityKeyData);                                     
                                            
    @Html.Hidden("linkName", "RadParent")
    @Html.Hidden("linkId", "WorkOrderSpan")
    @Html.Hidden("HiddenValueAction")
    
    <div id='large-badges'></div><div id='ValSum' style="display:none" class='notifyBox bad'>Please fix these errors. </div>

     
    <div class="notifyBox " id="GeneratedDocsDiv" style="display:none">
            <div id="invDiv" style="display:none">
            <h3>Za dokument je kreiran račun.</h3>
                    <ul>
                    <li> Za prikaz kliknite <a id="invoice" href="#">ovdje</a></li>
                    </ul>
            </div>   
                 <div id="copyDiv" style="display:none">
            <h3>Dokument je kopiran.</h3>
                    <ul>
                    <li> Za prikaz kliknite <a id="copy" href="#">ovdje</a></li>
                    </ul>
        </div>       
    </div>
    
    
<div class="clearb"></div>
    
<div class="clearb"></div>

	 <h2 class="pt"><div class="span-22"> @caption </div></h2>
    
     <div id="MailPrint" class="span-23" style="text-align:right">
    <a id="mailLink" href="#" onclick="Mail();"><img id="mailImg" src="@Url.Content("~/Content/images/mail_send48.png")" title="Pošalji pdf na email" alt="Pošalji pdf na email" /></a>
    <a id="printLink" href="#"  onclick="Print();"><img id="printImg" src="@Url.Content("~/Content/images/Printer_Blue48.png")" title="Ispiši dokument" alt="Ispiši dokument" /></a>
    <h2 class='pt'></h2>
	<div id="dashboard-create-new-panel" class="button-panel" >
	<div class="dropdown-button large-green">
	<span>Kreiraj</span>
	<ul>
		<li>
		<a id="genInvoice" class="konj" href="#" onclick="jqConfirm('genInvoice');">
		Račun&nbsp;
		</a>
	</li>
        <li>
		<a id="genCopy" class="konj" href="#" onclick="jqConfirm('genCopy');">
		Kopiju&nbsp;
		</a>
	</li>
	</ul>
</div>

		</div>
	
<div class="clearb"></div>   

    
    @*<a id="CreateDocInvoiceImg" href="#" onclick="jqConfirm('genInvoice');"><img  src="@Url.Content("~/Content/images/invoice-icon.png")" title="Kreiraj račun" alt="Kreiraj račun" /></a>
       
    <a id="CreateDocOfferImg" href="#" onclick="jqConfirm('genCopy');"><img  src="@Url.Content("~/Content/images/CopyIcon.png")" title="Kopiraj dokument" alt="Kopiraj dokument" /></a>*@
    </div>
	
	<div class="clearb"></div>
	<div class="title-rule"></div>

	<table width="100%" cellspacing="0" cellpadding="0" class="newTable">
	<tr><td colspan='5'></td></tr>
	</table>


<div id="DefaultEmements">    
     


    

                
            <div class="span-23" style="position: relative;">
                  
                <div class="span-6 required form-layout-left">
			        <label for="customerid" class="no-pointer">Klijent:</label>
		        </div>
                <div class="span-16 form-layout-right">
                @Html.DevExpress().ComboBox(settings => { settings.Name = "MDSubjects_SubjectId"; settings.Properties.ClientSideEvents.ValueChanged = "SubjectIdChanged"; settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith; settings.Height = 24; settings.Width = 200; settings.Properties.TextField = "Name"; settings.Properties.ValueField = "Id"; settings.Properties.ValueType = typeof(int); settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; settings.Properties.NullDisplayText = "Odaberite klijenta"; }).BindList(context.MDSubjects_Subject.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && p.SubjectType != (short)BusinessObjects.Common.SubjectType.Employee)).Bind(Model.MDSubjects_SubjectId).GetHtml()
                 <a id="lblAddClient" href="#" onclick="showClientPopup()">Dodaj klijenta</a>
                </div>
                   
               
                <div id="AdresaKlijentaDiv" style="display:none">
		            <div class="span-6 form-layout-left">
			            <label for="customerid" class="no-pointer">Adresa:</label>

		            </div>
		            <div class="span-16 form-layout-right">
                        <label id="oib" class="no-pointer"></label><br />
                        <label id="ulica" class="no-pointer"></label>&nbsp;<label id="broj" class="no-pointer"></label><br />
                        <label id="mjesto" class="no-pointer"></label><br />
		            </div>
                </div>

                   <div class="span-6 form-layout-left">
			        <label for="customerid" class="no-pointer">Mjesto rada:</label>

		        </div>
		        <div class="span-16 form-layout-right">
                    @Html.Partial("MjestaComboPartial", Model.PlaceId, new ViewDataDictionary() { { "cmbMjestaName", "PlaceId" }, { "controllerName", "WorkOrder" }, { "height", 24 }, { "width", 200 } })
                </div>

                <div id="client_section">
		            <div class="span-6 form-layout-left">
			            <label for="customerid" class="no-pointer">Km:</label>
		            </div>
		            <div class="span-16 form-layout-right">
			            @Html.DevExpress().SpinEdit(settings => { settings.Name = "Distance"; settings.Properties.DisplayFormatString = "n2"; settings.Height = 24; settings.Width = 200; settings.Properties.SpinButtons.ShowIncrementButtons = false; settings.Properties.MinValue = 1; settings.Properties.MaxValue = 100000000; settings.Properties.DecimalPlaces = 2; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.Distance).GetHtml()
		            </div>
                </div>

            <div class="span-6 form-layout-left">
				    <label for="invoice_number" class="no-pointer"><span title="">Fakturirati put:</span></label>
	            </div>
	            <div class="span-16 form-layout-right">
                    @Html.DevExpress().CheckBox(settings => { settings.Name = "IsBillable"; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = false; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.IsBillable).GetHtml()
                </div>
                
             
            </div>

            <div class="span-23">

                <div class="span-12 form-layout-left" >
				    <label for="invoice_number" class="no-pointer"><span title="">Projekt:</span></label>
	            </div>
	            <div class="span-10 form-layout-right" >
                    @Html.DevExpress().ComboBox(settings => { settings.Name = "Projects_ProjectId"; settings.Properties.TextField = "Name"; settings.Properties.ValueField = "Id"; settings.Properties.ValueType = typeof(int); settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).BindList(itemsProject).Bind(Model.Projects_ProjectId).GetHtml()
                </div>

                
                <div class="span-12 form-layout-left">
				    <label for="invoice_number" class="no-pointer"><span title="">Zatvoren:</span></label>
	            </div>
	            <div class="span-10 form-layout-right">
                    @Html.DevExpress().CheckBox(settings => { settings.Name = "IsVerified"; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = false; settings.Properties.ValidationSettings.ValidateOnLeave = true; settings.Properties.ClientSideEvents.CheckedChanged = "IsVerifiedChanged"; }).Bind(Model.IsVerified).GetHtml()
                </div>
   
                <div class="span-12 form-layout-left">
				    <label for="invoice_number" class="no-pointer"><span title="">Potpisao:</span></label>
	            </div>
	            <div class="span-10 form-layout-right">
                        @Html.DevExpress().TextBox(settings => { settings.Name = "VerifierName"; settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = false; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.VerifierName).GetHtml()
                </div>


                <div class="span-12 form-layout-left">
				    <label for="invoice_number" class="no-pointer"><span title="">Telefon:</span></label>
	            </div>
	            <div class="span-10 form-layout-right">
                        @Html.DevExpress().TextBox(settings => { settings.Name = "VerifierPhone"; settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = false; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.VerifierPhone).GetHtml()
                    </div>

                <div class="span-12 form-layout-left">
				    <label for="invoice_number" class="no-pointer"><span title="">Datum:</span></label>
	            </div>
	            <div class="span-10 form-layout-right">
                        @Html.DevExpress().DateEdit(settings => { settings.Name = "DocumentDateTime"; settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = false; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.DocumentDateTime).GetHtml()
                    </div>
            </div>
    
             <div class="clearb" style="padding-top:20px"></div>
              
            <a href="#" onclick="showProductPopup()" class="jqModal">Dodaj proizvod</a>
    
            @*<fieldset style="padding-top:20px">*@
                @*<legend>Utrošeni materijal</legend>*@
                @Html.Partial("MaterialTrackingGridPartial", ViewData["materialList"])
           @* </fieldset>*@

            <div class="clearb" style="padding-top:20px"></div>
            <a href="#" onclick="showServicePopup()" class="jqModal">Dodaj uslugu</a>
            @*<fieldset style="padding-top:20px">
                <legend>Usluga</legend>*@
                @Html.Partial("TimeTrackingGridPartial", ViewData["timeList"])
            @*</fieldset>*@
           @* <a href="javascript:pcModalMode.Show();" class="jqModal">Dodaj proizvod</a>
            <a href="javascript:pcModalModeSrv.Show();" class="jqModal">Dodaj uslugu</a>
            <div id="accordion">
	<h3><a href="#">Artikli</a></h3>
	<div>
        
		@Html.Partial("MaterialTrackingGridPartial", ViewData["materialList"])
	</div>
    <h3><a href="#">Usluge</a></h3>
	<div>
        
		@Html.Partial("TimeTrackingGridPartial", ViewData["timeList"])
	</div>
</div>*@
    
            
            <div class="clearb" style="padding-top:20px"></div>
            <div class="append-bottom-1 form-layout">
	            <div class="span-20 append-4 append-bottom-1 iefix-2">
                    <label for="terms">Opis:</label>
                    @Html.DevExpress().Memo(settings => { settings.Name = "Description"; settings.Height = 60; settings.Width = 920; settings.ShowModelErrors = true; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.Description).GetHtml()
                </div>
            </div>

  <div class="clearb"></div>
            
    
    
   
<div class="clearb"></div>

    <div class="span-40 append-1">
        <div class="span-10 append-1"></div>
        <div class="span-10 append-1">
                <a href="#" class="button_large launch-invitepop-invoice " onclick="$(this).closest('form').submit(); noUnload();">
                <span class="pointer">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Snimi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
        </div>
        <div class="span-2 append-1"></div>
        <div class="span-10 append-1">
                <a href="@Url.Content("~/Documents/WorkOrder/Odustani")" onclick="noUnload();" class="button_large2 launch-invitepop-invoice ">
                <span class="pointer">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Odustani&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
        </div>
        <div class="span-8 append-1"></div>
    </div>

    
    
    
    
    
       
</div> 
 

    
   <div id="printDiv" style="height:1000px; display:none">
    
     @Html.DevExpress().ReportToolbar(
            settings =>
            {
                settings.Name = "ReportToolbar";
                settings.ReportViewerName = "ReportViewer1";
            }
        ).GetHtml()

        @Html.Partial("WorkOrderReportPartial", ViewData["Report"], new ViewDataDictionary() { { "WorkOrderId", ViewData["WorkOrderId"] } })

    </div> 
    
    <div id="mailDiv" style="height:1000px; display:none">
            <div id='large-badges'></div><div id="mailErr" style="display:none" class='notifyBox bad'>
                <h3>Greška prilikom slanja.</h3>
                    <ul>
                    <li> Detalji: </li>
                        <ul>
                        <li> <label id="mailErrLabel"></label> </li>
                        </ul>
                    </ul>
                    
            </div>

            <div class="notifyBox " id="mailOk" style="display:none">
            <h3>Poruka je uspjesno poslana.</h3>
                    <ul>
                    <li> Radni nalog je poslan na adresu: </li>
                        <ul>
                        <li> <label id="mailOkLabel"></label> </li>
                        </ul>
                    </ul>
            
           </div>
        <div class="clearb"></div>

        <div class="span-23" style="position: relative;">
	        
		        <div class="span-6 required form-layout-left">
			        <label for="customerid" class="no-pointer">Email adresa:</label>

		        </div>
		        <div class="span-16 form-layout-right">
			        @Html.DevExpress().TextBox(settings => { settings.Name = "SendTo"; settings.Width = 200; settings.ShowModelErrors = false; }).GetHtml()
		        </div>

                <div class="span-6  form-layout-left">
			        <label for="customerid" class="no-pointer">CC:</label>

		        </div>
		        <div class="span-16 form-layout-right">
			        @Html.DevExpress().TextBox(settings => { settings.Name = "SendToCC"; settings.Width = 200; settings.ShowModelErrors = false; }).GetHtml()
		        </div>
            

                <div class="span-6  form-layout-left">
			        <label for="customerid" class="no-pointer">Subjekt poruke:</label>

		        </div>
		        <div class="span-16 form-layout-right">
			        @Html.DevExpress().TextBox(settings => { settings.Name = "Subject"; settings.Width = 200; settings.ShowModelErrors = false; }).GetHtml()
		        </div>

                <div class="span-6  form-layout-left">
			        <label for="customerid" class="no-pointer">Poruka:</label>

		        </div>
		        <div class="span-16 form-layout-right">
			        @Html.DevExpress().Memo(settings => { settings.Name = "Body"; settings.Height = 80; settings.Width = 600; settings.ShowModelErrors = false; }).GetHtml()
		        </div>

                <div class="clearb"></div>
    
                <div class="span-40 append-1">
                    <div class="span-16 append-1"></div>
                    <div class="span-10 append-1">
                            <a href="#" class="button_large launch-invitepop-invoice " onclick="SendReportByEmail()">
                 
                            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pošalji&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
                    </div>
                    @*<div class="span-2 append-1"></div>
                    <div class="span-10 append-1">
                            <a href="@Url.Content("#")" class="button_large2 launch-invitepop-invoice " onclick="CloseMail()">
                            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Odustani&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
                    </div>
                    <div class="span-8 append-1"></div>*@
                </div>

        </div>
    </div>        
    
    
<div id="dialog" title="Molimo potvrdite">
	        <p><span  class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span><label id="dialogtext"></label></p>
        </div>
   
}


 @using (Html.BeginForm("CreateAndEdit", "#", FormMethod.Post, new { id = "myFormPro", name = "myFormPro" }))
 {
 @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalMode";
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.EnableAnimation = true;
            settings.HeaderText = "Dodaj proizvod";
            settings.Width = 600;
            settings.Modal = true;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.SetContent(() =>
            {
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Naziv:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsS => { settingsS.Name = "ProductName"; settingsS.Height = 24; settingsS.Width = 200; settingsS.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Šifra:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsS => { settingsS.Name = "Label"; settingsS.Height = 24; settingsS.Width = 200; settingsS.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Porezna stopa:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().ComboBox(settingscb => { settingscb.Name = "TaxRateId"; settingscb.Width = 200; settingscb.Properties.TextField = "Name"; settingscb.Properties.ValueField = "Id"; settingscb.ShowModelErrors = false; }).BindList(contextEnt.MDEntities_Enums_TaxRate.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId || p.CompanyUsingServiceId == 0)).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Jedinica mjere:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().ComboBox(settingsa => { settingsa.Name = "UnitId"; settingsa.Width = 200; settingsa.Properties.TextField = "Name"; settingsa.Properties.ValueField = "Id"; settingsa.ShowModelErrors = false; settingsa.Properties.ValueType = typeof(int); }).BindList(contextEnt.MDEntities_Enums_Unit.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId || p.CompanyUsingServiceId == 0)).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Veleproajna cijena:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().SpinEdit(settingsSp => { settingsSp.Name = "WholesalePrice"; settingsSp.Properties.MinValue = 0; settingsSp.Properties.MaxValue = 9999999; settingsSp.Properties.DecimalPlaces = 2; settingsSp.Width = 200; settingsSp.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10  form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">&nbsp;</label></div><div class=\"span-12 form-layout-right\"><a class=\"butMedium green\"  onclick=\"AddProduct()\" href=\"#\"><span>Dodaj proizvod</span></a></div>");
            });
        }).GetHtml()
 }
        @using (Html.BeginForm("CreateAndEdit", "#", FormMethod.Post, new { id = "myFormSrv", name = "myFormSrv" }))
        {
         @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalModeSrv";
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.EnableAnimation = true;
            settings.HeaderText = "Dodaj uslugu";
            settings.Width = 600;
            settings.Modal = true;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.SetContent(() =>
            {
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Šifra:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsLbl => { settingsLbl.Name = "ServiceLabel"; settingsLbl.Height = 24; settingsLbl.Width = 200; settingsLbl.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Naziv:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsS => { settingsS.Name = "ServiceName"; settingsS.Height = 24; settingsS.Width = 200; settingsS.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Porezna stopa:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().ComboBox(settingscb => { settingscb.Name = "ServiceTaxRateId"; settingscb.Width = 200; settingscb.Properties.TextField = "Name"; settingscb.Properties.ValueField = "Id"; settingscb.ShowModelErrors = false; }).BindList(contextEnt.MDEntities_Enums_TaxRate.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId || p.CompanyUsingServiceId == 0)).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Jedinica mjere:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().ComboBox(settingsq => { settingsq.Name = "ServiceUnitId"; settingsq.Width = 200; settingsq.Properties.TextField = "Name"; settingsq.Properties.ValueField = "Id"; settingsq.ShowModelErrors = false; settingsq.Properties.ValueType = typeof(int); }).BindList(contextEnt.MDEntities_Enums_Unit.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId || p.CompanyUsingServiceId == 0)).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Veleproajna cijena:</label></div><div class=\"span-12 form-layout-right\">");
                @Html.DevExpress().SpinEdit(settingsSp => { settingsSp.Name = "WholesalePriceSrv"; settingsSp.Width = 200; settingsSp.Properties.MaxValue = 9999999; settingsSp.Properties.DecimalPlaces = 2; settingsSp.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10  form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">&nbsp;</label></div><div class=\"span-12 form-layout-right\"><a class=\"butMedium green\"  onclick=\"AddService()\" href=\"#\"><span>Dodaj uslugu</span></a></div>");
                //ViewContext.Writer.Write("</div>");

            });
        }).GetHtml()
        }
        @using (Html.BeginForm("CreateAndEdit", "#", FormMethod.Post, new { id = "myFormCli", name = "myFormCli" }))
        {

        @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalModeCli";
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.EnableAnimation = true;
            settings.HeaderText = "Dodaj klijenta";
            settings.Width = 600;
            settings.Modal = true;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.SetContent(() =>
            {
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Vrsta klijenta:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().ComboBox(settingsSt => { settingsSt.Name = "SubjectType"; settingsSt.Properties.ClientSideEvents.ValueChanged = "PopupSubjectTypeChanged"; settingsSt.Properties.ValueField = "Id"; settingsSt.Properties.TextField = "Name"; settingsSt.Properties.ValueType = typeof(byte); settingsSt.Height = 24; settingsSt.Width = 200; settingsSt.ShowModelErrors = false; }).BindList(new AlphaWebCommodityBookkeeping.Areas.Documents.Models.SubjectTypes()).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Naziv klijenta:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsCli => { settingsCli.Name = "ClientName"; settingsCli.Height = 24; settingsCli.Width = 200; settingsCli.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div id=\"Oibdiv\" class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">OIB:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsOib => { settingsOib.Name = "ClientOIB"; settingsOib.Properties.MaxLength = 11; settingsOib.Height = 24; settingsOib.Width = 200; settingsOib.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Mjesto:</label></div><div class=\"span-16 form-layout-right\">");
                //@Html.Partial("MjestaComboPartial2", Model.ShipToAddress_PlaceId, new ViewDataDictionary() { { "cmbMjestaName", "ShipToAddress_PlaceId11" }, { "controllerName", "Invoice" }, { "height", 20 }, { "width", 200 } });
                @Html.DevExpress().ComboBox(
                 cbsettings =>
                 {
                     cbsettings.Name = "Mjesta3";
                     cbsettings.Height = 20;
                     cbsettings.Width = 200;
                     cbsettings.Properties.DropDownWidth = 350;
                     cbsettings.Properties.DropDownStyle = DropDownStyle.DropDown;
                     cbsettings.CallbackRouteValues = new { Controller = "WorkOrder", Action = "MjestaComboPartial3" };
                     cbsettings.Properties.EnableCallbackMode = true;
                     cbsettings.Properties.EnableSynchronization = DefaultBoolean.True;
                     cbsettings.Properties.CallbackPageSize = 15;
                     cbsettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     cbsettings.Properties.TextField = "Name";
                     cbsettings.Properties.TextFormatString = "{0}";
                     cbsettings.Properties.ValueField = "Id";
                     cbsettings.Properties.ConvertEmptyStringToNull = true;
                     cbsettings.Properties.ValueType = typeof(int);
                     cbsettings.Properties.FilterMinLength = 0;
                     cbsettings.Properties.Columns.Add("Name", "Naziv", System.Web.UI.WebControls.Unit.Percentage(80));
                     cbsettings.Properties.Columns.Add("Zip", "Pošt. broj", System.Web.UI.WebControls.Unit.Percentage(20));
                 }
                ).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Ulica i broj:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsOib => { settingsOib.Name = "UlicaBroj"; settingsOib.Height = 24; settingsOib.Width = 200; settingsOib.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10  form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">&nbsp;</label></div><div class=\"span-16 form-layout-right\"><a class=\"butMedium green\"  onclick=\"AddClient()\" href=\"#\"><span>Dodaj klijenta</span></a></div>");


            });
        }).GetHtml()
        }



        @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalModeDesc";
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.EnableAnimation = true;
            settings.HeaderText = "Dodaj napomenu";
            settings.Width = 600;
            settings.Modal = true;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.Middle;
            settings.SetContent(() =>
            {
                @Html.DevExpress().Memo(settingsMemo => { settingsMemo.Name = "DescriptionDesc"; settingsMemo.Width = 800; settingsMemo.Height = 100; }).GetHtml();
                ViewContext.Writer.Write("<div class=\"span-10  form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">&nbsp;</label></div><div class=\"span-12 form-layout-right\"><a class=\"butMedium green\"  onclick=\"AddDesc()\" href=\"#\"><span>Dodaj napomenu</span></a></div>");
            });
        }).GetHtml()









