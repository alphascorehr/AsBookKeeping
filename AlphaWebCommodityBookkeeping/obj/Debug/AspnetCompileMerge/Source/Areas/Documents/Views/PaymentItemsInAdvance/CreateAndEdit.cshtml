@model BusinessObjects.Documents.cDocuments_Payment

@{
    ViewBag.Title = "CreateAndEdit";
    DalEf.MDSubjectsEntities context = new DalEf.MDSubjectsEntities();
}
<script type="text/javascript">
//<![CDATA[
    var isInCallback = false;
    var itemOrdinalNumber = 0;
    var forceSelectionChange = false;


    $(window).bind('beforeunload', function () {
        if ('@ViewData["Action"]' == "locked") {
            return;
        }
        //if (AreControlsModifiedVar)
        //{
        //    return "No pressure, but check out the important announcement in the middle of the screen?";
        //}

        //return "Good bye";
        var url = '@Url.Content("~/Documents/PaymentItemsInAdvance/unlockTheDoc")';
        $.post(url, function (result) {
            return "Url is about to be changed, kill the lock";
        });

    });


    function noUnload() {
        $(window).unbind('beforeunload');
    }

    $(document).ready(function () {
        if ('@ViewData["Action"]' == "locked") {
            alert(lockText);
            window.history.back(-1);
        }
  
    });


    function OnStartCallback(s, e) {
        isInCallback = true;
    }
    function OnEndCallback(s, e) {
        isInCallback = false;
    }

    function OnDocumentsForPaymentStartCallback(s, e) {
        return false;
    }

    function OnDocumentsForPaymentEndCallback(s, e) {

    }

    function PayedValidation(s, e) {
        //      var row =  gvDocumentsForPayment.GetFocusedRow();
        //        var val1 = parseFloat($('#gvDocumentsForPayment_DXEditor4_I').attr('value'));
        //        var val2 = parseFloat($('#gvDocumentsForPayment_DXEditor5_I').attr('value'));
        //    if (e.value > (val1 - val2)) {
        //        e.errorText = "Preplaćeno!";
        //        e.isValid = false;
        //    }
    }

    $.validator.setDefaults({
        submitHandler: function () {
            document.myForm.submit();
        }
    });

    $().ready(function () {
        // validate signup form on keyup and submit
        $("#myForm").validate({
            rules: {
                SubjectId: "required",
                UniqueIdentifier: "required",
                OrdinalNumber: "required",
                OrdinalNumberInYear: "required",
                CreationDateTime: "required"

            },
            messages: {
                SubjectId: "Obavezno polje",
                UniqueIdentifier: "Obavezno polje",
                OrdinalNumber: "Obavezno polje",
                OrdinalNumberInYear: "Obavezno polje",
                CreationDateTime: "Obavezno polje"
            }
        });


        $('#BankId_I').attr('disabled', true);
        $('#BankId_VI').attr('disabled', true);
        $('#BankId_B-1').hide();

        $('#SubjectBuyerId_I').attr('disabled', true);
        $('#SubjectBuyerId_VI').attr('disabled', true);
        $('#SubjectBuyerId_B-1').hide();

        $('#SubjectSupplierId_I').attr('disabled', true);
        $('#SubjectSupplierId_VI').attr('disabled', true);
        $('#SubjectSupplierId_B-1').hide();

        //$('#BankId_B-1').hide();
        $('.dxeButtonEditButton').hide();
        $('.dxeButtonEdit ').attr('style', 'height:24px;width:148px;background-color:Transparent');
        $('.dxeEditArea ').attr('style', 'background-color:Transparent');

        //$('.dxeMemoEditArea ').attr('style', 'height:24px;width:100%;margin-left:-1px;margin-right:0px;margin-top:0px;margin-bottom:0px;overflow-y:scroll;background-color:Transparent');
        //$('.dxeReadOnly   ').attr('style', 'background-color:Transparent');
    });

    function Refresh(s, e) {
        gvDocumentsForPayment.PerformCallback();
    }


//    function gvPaymentFocusedRowChanged(s, e) {
//        s.GetRowValues(s.GetFocusedRowIndex(), 'Ordinal;SubjectBuyerId;SubjectSupplierId;InAdvance;Ammount', OnGetRowValues);
//    }

//    function OnGetRowValues(values) {
//        if (values[0] != itemOrdinalNumber || (values[0] == itemOrdinalNumber && forceSelectionChange)) {
//            forceSelectionChange = false;
//            if (values[0] != null && !isInCallback) {
//                $.post("/Documents/PaymentItemsInAdvance/SelectedItemChanged", { Ordinal: values[0], SubjectBuyerId: values[1], SubjectSupplierId: values[2], InAdvance: values[3], Ammount: values[4] }, function (result) {
//                    gvDocumentsForPayment.PerformCallback();

//                    if (values[3] == true) {
//                        if ($('#docForUpdate').is(':hidden') == false) {
//                            $('#docForUpdate').fadeOut(100);
//                        }
//                    }
//                    else {
//                        if ($('#docForUpdate').is(':hidden') == true) {
//                            $('#docForUpdate').fadeIn(100);
//                        }
//                    }

//                });

//                itemOrdinalNumber = values[0];
//            }

//        }
//    }

    function OnPaymentValueChanged(s, fieldName, keyValue, url) {
        //        var val1 = parseFloat(retailValue);
        //        var val2 = parseFloat(payedTillDocument);
        var data = { key: keyValue, fieldName: fieldName };
        if (s.GetValueString() != null)
            data.value = s.GetValueString();

        $.post(url, data, function (result) {
            //            if ((parseFloat(data.value) + val2) > val1) {
            //                var c = s;
            //                $('#' + s.name).attr('style', 'background-color:Red');
            //                $('#' + s.name + '_I').attr('style', 'background-color:Red');
            //            }
            //            else {
            //                $('#' + s.name).attr('style', 'background-color:Green');
            //                $('#' + s.name + '_I').attr('style', 'background-color:Green');
            //            }
        });
    }

    function CheckBoxInit(s, e) {
        if (s.GetValue() == null)
            s.SetValue(false);
    }

//    function CheckStateChanged(s, keyValue) {
//        if (itemOrdinalNumber == keyValue) {
//            if (s.GetValue() == true) {
//                if ($('#docForUpdate').is(':hidden') == false) {
//                    $('#docForUpdate').fadeOut(100);
//                }
//            }
//            else {
//                if ($('#docForUpdate').is(':hidden') == true) {
//                    $('#docForUpdate').fadeIn(100);
//                }
//            }
//        }
//    }

    function NoviClick() {
        gvPaymentItemsCol.AddNewRow();
    }

    function BuyerIndexChanged(s, e) {

        forceSelectionChange = true;
        gvPaymentItemsCol_DXEditor2.SetValue("");


    }

    function SupplierIndexChanged(s, e) {

        forceSelectionChange = true;
        gvPaymentItemsCol_DXEditor1.SetValue("");
    }

    
 // ]]>
</script>

@{
    string url = Request.Url.AbsoluteUri;
    string caption = "Avansi";
    if (!string.IsNullOrEmpty(url) && url.EndsWith("0"))
    {
        caption = "Novi avans";

    }
}

@using (Html.BeginForm("CreateAndEdit", "PaymentItemsInAdvance", FormMethod.Post, new { id = "myForm", name = "myForm" }))
{
    @Html.HiddenFor(model => model.Id);
    @Html.HiddenFor(model => model.EntityKeyData);

                                                                                       
    @Html.Hidden("linkName", "KomercijalaParent")
    @Html.Hidden("linkId", "PaymentItemsInAdvanceSpan")                                      
    
                                                                                                                                                                              

    <div id='large-badges'></div><div id='ValSum' style="display:none" class='notifyBox bad'>Please fix these errors. </div>


    
    
<div class="clearb"></div>
<div class="clearb"></div>

	<h2 class="button-panel-title">
		<div class="button-panel">
	    </div>
        <span class="title">@caption</span>
	</h2>
	
	<div class="clearb"></div>
	<div class="title-rule"></div>

	<table width="100%" cellspacing="0" cellpadding="0" class="newTable">
	<tr><td colspan='5'></td></tr>
	</table>

    
                                            //Lijevi div
	<div class="span-23" style="position: relative;">
	    <div id="client_section">
		    <div class="span-6  form-layout-left">
			    <label for="customerid" class="no-pointer">Banka:</label>

		    </div>
		    <div class="span-16 form-layout-right">
			    @Html.DevExpress().ComboBox(settings => { settings.Name = "BankId"; settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith; settings.Enabled = true; settings.ReadOnly = true; settings.Height = 24; settings.Width = 200; settings.Properties.TextField = "Name"; settings.Properties.ValueField = "Id"; settings.Properties.ValueType = typeof(int); settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).BindList(BusinessObjects.MDSubjects.cMDSubjects_Enums_Bank_List.GetcMDSubjects_Enums_Bank_List(((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId, Model.BankId)).Bind(Model.BankId).GetHtml()
		    </div>
        </div>

       @* <div id="AdresaKlijentaDiv" style="display:none">
		    <div class="span-6 form-layout-left">
			    <label for="customerid" class="no-pointer">Adresa:</label>

		    </div>
		    <div class="span-16 form-layout-right">
                <label id="oib" class="no-pointer"></label><br />
                <label id="ulica" class="no-pointer"></label>&nbsp;<label id="broj" class="no-pointer"></label><br />
                <label id="mjesto" class="no-pointer"></label><br />
		    </div>
        </div>
*@

        <div id="client_section">
		    <div class="span-6  form-layout-left">
			    <label for="customerid" class="no-pointer">Broj izvoda:</label>

		    </div>
		    <div class="span-16 form-layout-right">
			    @Html.DevExpress().Label(settings => { settings.Name = "UniqueIdentifier"; settings.Height = 24; settings.Width = 200; }).Bind(Model.UniqueIdentifier).GetHtml()
		    </div>
        </div>

          <div id="client_section">
		    <div class="span-6  form-layout-left">
			    <label for="customerid" class="no-pointer">Datum izvoda:</label>

		    </div>
		    <div class="span-16 form-layout-right">
			    @Html.DevExpress().Label(settings => { settings.Name = "DocumentDateTime"; settings.Height = 24; settings.Width = 148; }).Bind(Model.DocumentDateTime.ToShortDateString()).GetHtml()
		    </div>
        </div>

</div>

    
    
                                            //Desni div
<div class="span-23">
	<div class="span-12  form-layout-left">
				<label for="invoice_number" class="no-pointer"><span title="">Redni broj:</span></label>
	</div>
	<div class="span-10 form-layout-right">
		@Html.DevExpress().Label(settings => { settings.Name = "Ordinal"; settings.Height = 24; settings.Width = 200; }).Bind(Model.Documents_PaymentItemsCol[0].Ordinal).GetHtml()

	</div>

    <div class="span-12  form-layout-left">
				<label for="invoice_number" class="no-pointer"><span title="">Kupac:</span></label>
	</div>
	<div class="span-10 form-layout-right">
		@Html.DevExpress().ComboBox(settings => { settings.Name = "SubjectBuyerId"; settings.ReadOnly = true; settings.Height = 24; settings.Properties.TextField = "Name"; settings.Properties.ValueField = "Id"; settings.Properties.ValueType = typeof(int); settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).BindList(context.MDSubjects_Subject.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId)).Bind(Model.Documents_PaymentItemsCol[0].SubjectBuyerId).GetHtml()
	</div>

    <div class="span-12  form-layout-left">
				<label for="invoice_number" class="no-pointer"><span title="">Dobavljač:</span></label>
	</div>
	<div class="span-10 form-layout-right">
		@Html.DevExpress().ComboBox(settings => { settings.Name = "SubjectSupplierId"; settings.ReadOnly = true; settings.Height = 24; settings.Properties.TextField = "Name"; settings.Properties.ValueField = "Id"; settings.Properties.ValueType = typeof(int); settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).BindList(context.MDSubjects_Subject.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId)).Bind(Model.Documents_PaymentItemsCol[0].SubjectSupplierId).GetHtml()
	</div>
	
    <div class="span-12  form-layout-left">
				<label for="invoice_number" class="no-pointer"><span title="">Iznos:</span></label>
	</div>
	<div class="span-10 form-layout-right">
		@Html.DevExpress().Label(settings => { settings.Name = "Ammount"; settings.Height = 24; settings.Width = 200; }).Bind(Model.Documents_PaymentItemsCol[0].Ammount).GetHtml()
	</div>
	
	</div>
 
    @Html.Partial("DocumentsForPaymentGridPartial", ViewData["docForUpdate"])
    
    <div class="clearb"></div>
    <div class="append-bottom-1 form-layout">
	<div class="span-20 append-4 append-bottom-1 iefix-2">
		<label for="terms">Napomena</label>
		
		@Html.DevExpress().Memo(settings => { settings.Name = "Description"; settings.Height = 60; settings.Width = 400; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.Description).GetHtml()
	</div>

	
</div>
 
 <div class="clearb"></div>
               <div class="span-40 append-1">
        <div class="span-10 append-1"></div>
        <div class="span-10 append-1">
                <a href="#" class="button_large launch-invitepop-invoice " onclick="$(this).closest('form').submit(); noUnload();">
                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Snimi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
        </div>
        <div class="span-2 append-1"></div>
        <div class="span-10 append-1">
                <a href="@Url.Content("~/Documents/PaymentItemsInAdvance/Odustani")" onclick="noUnload();" class="button_large2 launch-invitepop-invoice ">
                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Odustani&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
        </div>
        <div class="span-8 append-1"></div>
    </div>
       


}

