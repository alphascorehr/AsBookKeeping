@model BusinessObjects.Documents.cDocuments_OrderForm

@{
    ViewBag.Title = "CreateAndEdit";
    DalEf.MDSubjectsEntities context = new DalEf.MDSubjectsEntities();
}

<script type="text/javascript">

    $(window).bind('beforeunload', function () {
        if ('@ViewData["Action"]' == "locked") {
            return;
        }
        //if (AreControlsModifiedVar)
        //{
        //    return "No pressure, but check out the important announcement in the middle of the screen?";
        //}

        //return "Good bye";
        var url = '@Url.Content("~/Documents/OrderForm/unlockTheDoc")';
        $.post(url, function (result) {
            return "Url is about to be changed, kill the lock";
        });

    });


    function noUnload() {
        $(window).unbind('beforeunload');
    }


    $.validator.setDefaults({
        submitHandler: function () {
            document.myForm.submit();
        }
    });
    var icustomer;
    $().ready(function () {
        // validate signup form on keyup and submit
        $("#myForm").validate({
            rules: {
                MDSubjects_SubjectId: "required"
            },
            messages: {
                MDSubjects_SubjectId: "Obavezno polje"
            }
        });
        $("#myFormCli").validate({
            rules: {
                ClientName: "required",
                SubjectType: "required",
                Mjesta3: "required",
                UlicaBroj: "required",
                ClientOIB: "required"
            },
            messages: {
                ClientName: "Obavezno polje",
                SubjectType: "Obavezno polje",
                Mjesta3: "Obavezno polje",
                UlicaBroj: "Obavezno polje",
                ClientOIB: "Obavezno polje"
            }

        });
        SubjectIdChanged();

        if ('@ViewData["Action"]' == "locked") {
            alert(lockText);
            window.history.back(-1);
        }

    });


    $('#cBoxBillTo').click(function () {
        if (this.checked) {
            $("#BillToDiv").slideDown('slow');
        } else {
            $("#BillToDiv").slideUp('slow');
        }
    });

    $('#cBoxShipTo').click(function () {
        if (this.checked) {
            $("#ShipToDiv").slideDown('slow');
        } else {
            $("#ShipToDiv").slideUp('slow');
        }
    });

    function SubjectIdChanged(s, e) {
        $('#AdresaKlijentaDiv').slideUp('slow');
        /* SubjectId se trpa u Session */
        var SubjectId = parseInt($('#MDSubjects_SubjectId_VI').attr('value'));

        if (SubjectId == null || SubjectId == "" || SubjectId == "0" || isNaN(SubjectId)) {
            return false;
        }
        if (SubjectId != null) {
            var actionURL = '@Url.Content("~/Documents/OrderForm/SubjectIdChanged")';
            $.post(actionURL, { subjectId: SubjectId }, function (result) {
                var oib = result[0];
                var ulica = result[1];
                var broj = result[2];
                var mjesto = result[3];
                var adresa = ulica;
                if (oib == null) {
                    oib = "Nije unešen";
                }
                if (ulica == null) {
                    adresa = "Nije unešena";
                }
                if (mjesto == null) {
                    mjesto = "Nije unešeno";
                }
                $('#oib').html("OIB: " + oib)
                $('#ulica').html("Adresa: " + adresa);
                $('#mjesto').html("Mjesto: " + mjesto);
            });
            $('#AdresaKlijentaDiv').slideDown('slow');
        }
        //gvDocumentItemsCol.CancelEdit();
        return SubjectId;
    }

    function ShowClientPopup()
    {
        ClientName.SetValue("");
        ClientOIB.SetValue("");
        SubjectType.SetValue("");
        Mjesta3.SetValue("");
        UlicaBroj.SetValue("");
        pcModalModeCli.Show();
        Mjesta3.PerformCallback();
    }

    function AddClient() {
        var ClName = ClientName.GetValue();
        var ClOIB = ClientOIB.GetValue();
        var SubType = SubjectType.GetValue();
        var MjestoId = Mjesta3.GetValue();
        var Ulicabroj = UlicaBroj.GetValue();
        $("#myFormCli").validate();
        var v = $("#myFormCli").valid();

        if (v) {
            var actionUrl = '@Url.Content("~/MDSubjects/Company/AddClient")'
            $.post(actionUrl, { Name: ClName, OIB: ClOIB, SubjectType: SubType, Mjesto: MjestoId, UlicaBroj: Ulicabroj }, function (result) {
                var id = parseInt(result);
                //var id = 1000;
                if (id > 0) {
                    MDSubjects_SubjectId.AddItem(ClName, id);
                    MDSubjects_SubjectId.SetText(ClName);
                    pcModalModeCli.Hide();
                    SubjectIdChanged();
                }
            });
        }
    }
    function PopupSubjectTypeChanged() {
        var subType = SubjectType.GetValue();
        if (subType == 0) {
            $('#Oibdiv').removeClass('required');
            //$('#ClientOIB').rules("remove", "required");

        }
        else {
            $('#Oibdiv').addClass('required');
            //$('#ClientOIB').rules("add", "required");

        }
    }
</script>

@{
    string caption = "Nova narudžba";
    if (Model.UniqueIdentifier != "")
    {
        caption = "Narudžba br. " + Model.UniqueIdentifier;
    }
}

@using (Html.BeginForm("CreateAndEdit", "OrderForm", FormMethod.Post, new { id = "myForm", name = "myForm" }))
{
    @Html.HiddenFor(model => model.Id);
    @Html.HiddenFor(model => model.EntityKeyData);
                                                                                
    @Html.Hidden("linkName", "KomercijalaParent")
    @Html.Hidden("linkId", "OrderFormSpan") 
    
                                                                                                                                                                              
 <div id='large-badges'></div><div id='ValSum' style="display:none" class='notifyBox bad'>Please fix these errors. </div>


    
    
<div class="clearb"></div>
<div class="clearb"></div>

	<h2 class="button-panel-title">
		<div class="button-panel">
	    </div>
        <span class="title">@caption</span>
	</h2>
	
	<div class="clearb"></div>
	<div class="title-rule"></div>

	<table width="100%" cellspacing="0" cellpadding="0" class="newTable">
	<tr><td colspan='5'></td></tr>
	</table>

    
                                            //Lijevi div
	<div class="span-23" style="position: relative;">
	    <div id="client_section">
		    <div class="span-6 required form-layout-left">
			    <label for="customerid" class="no-pointer">Klijent:</label>

		    </div>
		    <div class="span-16 form-layout-right">
			    @Html.DevExpress().ComboBox(settings => { settings.Name = "MDSubjects_SubjectId"; settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith; settings.Height = 24; settings.Width = 200; settings.Properties.ClientSideEvents.ValueChanged = "SubjectIdChanged"; settings.Properties.TextField = "Name"; settings.Properties.ValueField = "Id"; settings.Properties.ValueType = typeof(int); settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).BindList(context.MDSubjects_Subject.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && p.SubjectType != (short)BusinessObjects.Common.SubjectType.Employee)).Bind(Model.MDSubjects_SubjectId).GetHtml()
                <a href="#" onclick="ShowClientPopup()"><label id="lblAddClient">Dodaj klijenta</label></a>
                <br />
		    </div>
        </div>

       

        <div id="AdresaKlijentaDiv" style="display:none">
		    <div class="span-6 form-layout-left">
			    <label for="customerid" class="no-pointer">Adresa:</label>

		    </div>
		    <div class="span-16 form-layout-right">
                <label id="oib" class="no-pointer"></label><br />
                <label id="ulica" class="no-pointer"></label>&nbsp;<label id="broj" class="no-pointer"></label><br />
                <label id="mjesto" class="no-pointer"></label><br />
		    </div>
        </div>


</div>

    
    
                                            //Desni div
<div class="span-23">
	<div class="span-12 required form-layout-left">
				<label for="invoice_number" class="no-pointer"><span title="">Datum narudženice:</span></label>
	</div>
	<div class="span-10 form-layout-right">
		@Html.DevExpress().DateEdit(settings => { settings.Name = "DocumentDateTime"; settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.DocumentDateTime).GetHtml()

	</div>

    <div class="span-12  form-layout-left">
				<label for="invoice_number" class="no-pointer"><span title="">Osoba koja je naručila:</span></label>
	</div>
	<div class="span-10 form-layout-right">
		@*@Html.DevExpress().DateEdit(settings => { settings.Name = "MaturityDate"; settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.MaturityDate).GetHtml()*@
        @Html.DevExpress().TextBox(settings => { settings.Name = "OrderedByPerson"; settings.Height = 24; settings.Width = 200; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.OrderedByPerson).GetHtml()

	</div>


	
	
	</div>
 
    
    <div class="clearb"></div>
    <div class="append-bottom-1 form-layout">
	<div class="span-20 append-4 append-bottom-1 iefix-2">
		<label for="terms">Napomena</label>
		
		@Html.DevExpress().Memo(settings => { settings.Name = "Description"; settings.Height = 60; settings.Width = 920; settings.ShowModelErrors = false; settings.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithText; settings.Properties.ValidationSettings.ErrorTextPosition = ErrorTextPosition.Bottom; settings.Properties.ValidationSettings.SetFocusOnError = true; settings.Properties.ValidationSettings.ValidateOnLeave = true; }).Bind(Model.Description).GetHtml()
	</div>

	
</div>
 
   
<div class="clearb"></div>
            <div class="span-40 append-1">
        <div class="span-10 append-1"></div>
        <div class="span-10 append-1">
                <a href="#" class="button_large launch-invitepop-invoice " onclick="$(this).closest('form').submit(); noUnload();">
                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Snimi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
        </div>
        <div class="span-2 append-1"></div>
        <div class="span-10 append-1">
                <a href="@Url.Content("~/Documents/OrderForm/Odustani")" onclick="noUnload();" class="button_large2 launch-invitepop-invoice ">
                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Odustani&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></a>
        </div>
        <div class="span-8 append-1"></div>
    </div>
                
              

         
  
}

 @using (Html.BeginForm("CreateAndEdit", "#", FormMethod.Post, new { id = "myFormCli", name = "myFormCli" }))
 {
       @Html.DevExpress().PopupControl(
        settings =>
        {
            settings.Name = "pcModalModeCli";
            settings.AllowDragging = true;
            settings.CloseAction = CloseAction.CloseButton;
            settings.EnableAnimation = true;
            settings.HeaderText = "Dodaj klijenta";
            settings.Width = 600;
            settings.Modal = true;
            settings.AutoUpdatePosition = true;
            settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
            settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
            settings.SetContent(() =>
            {
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Vrsta klijenta:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().ComboBox(settingsSt => { settingsSt.Name = "SubjectType"; settingsSt.Properties.ClientSideEvents.ValueChanged = "PopupSubjectTypeChanged"; settingsSt.Properties.ValueField = "Id"; settingsSt.Properties.TextField = "Name"; settingsSt.Properties.ValueType = typeof(byte); settingsSt.Height = 24; settingsSt.Width = 200; settingsSt.ShowModelErrors = false; }).BindList(new AlphaWebCommodityBookkeeping.Areas.Documents.Models.SubjectTypes()).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Naziv klijenta:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsCli => { settingsCli.Name = "ClientName"; settingsCli.Height = 24; settingsCli.Width = 200; settingsCli.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div id=\"Oibdiv\" class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">OIB:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsOib => { settingsOib.Name = "ClientOIB"; settingsOib.Properties.MaxLength = 11; settingsOib.Height = 24; settingsOib.Width = 200; settingsOib.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Mjesto:</label></div><div class=\"span-16 form-layout-right\">");
                //@Html.Partial("MjestaComboPartial2", Model.ShipToAddress_PlaceId, new ViewDataDictionary() { { "cmbMjestaName", "ShipToAddress_PlaceId11" }, { "controllerName", "Invoice" }, { "height", 20 }, { "width", 200 } });
                @Html.DevExpress().ComboBox(
                 cbsettings =>
                 {
                     cbsettings.Name = "Mjesta3";
                     cbsettings.Height = 20;
                     cbsettings.Width = 200;
                     cbsettings.Properties.DropDownWidth = 350;
                     cbsettings.Properties.DropDownStyle = DropDownStyle.DropDown;
                     cbsettings.CallbackRouteValues = new { Controller = "OrderForm", Action = "MjestaComboPartial3" };
                     cbsettings.Properties.EnableCallbackMode = true;
                     cbsettings.Properties.EnableSynchronization = DefaultBoolean.True;
                     cbsettings.Properties.CallbackPageSize = 15;
                     cbsettings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                     cbsettings.Properties.TextField = "Name";
                     cbsettings.Properties.TextFormatString = "{0}";
                     cbsettings.Properties.ValueField = "Id";
                     cbsettings.Properties.ConvertEmptyStringToNull = true;
                     cbsettings.Properties.ValueType = typeof(int);
                     cbsettings.Properties.FilterMinLength = 0;
                     cbsettings.Properties.Columns.Add("Name", "Naziv", System.Web.UI.WebControls.Unit.Percentage(80));
                     cbsettings.Properties.Columns.Add("Zip", "Pošt. broj", System.Web.UI.WebControls.Unit.Percentage(20));
                 }
                  ).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-6 required form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">Ulica i broj:</label></div><div class=\"span-16 form-layout-right\">");
                @Html.DevExpress().TextBox(settingsOib => { settingsOib.Name = "UlicaBroj"; settingsOib.Height = 24; settingsOib.Width = 200; settingsOib.ShowModelErrors = false; }).GetHtml();
                ViewContext.Writer.Write("</div>");
                ViewContext.Writer.Write("<div class=\"span-10  form-layout-left\"><label for=\"customerid\" class=\"no-pointer\">&nbsp;</label></div><div class=\"span-16 form-layout-right\"><a class=\"butMedium green\"  onclick=\"AddClient()\" href=\"#\"><span>Dodaj klijenta</span></a></div>");


            });
        }).GetHtml()
 }