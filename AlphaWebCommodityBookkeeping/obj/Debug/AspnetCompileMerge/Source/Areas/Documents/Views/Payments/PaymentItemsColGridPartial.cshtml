@model BusinessObjects.Documents.cDocuments_PaymentItemsCol

 @{
     DalEf.MDSubjectsEntities contextSubjects = new DalEf.MDSubjectsEntities();
      var grid = Html.DevExpress().GridView(
                    settings =>
                    {
                        settings.Name = "gvPaymentItemsCol";
                        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                        settings.SettingsPager.PageSize = 5;
                        settings.SettingsPager.Summary.Position = DevExpress.Web.ASPxPager.PagerButtonPosition.Right;
                        settings.SettingsLoadingPanel.Text = "Učitavanje";

                        settings.SettingsPager.Summary.Text = "Stranica {0} od {1} ({2} reda)";
                        settings.SettingsText.EmptyDataRow = "Nema podataka";

                        //settings.CommandColumn.SetHeaderTemplateContent(c =>
                        //{
                        //    ViewContext.Writer.Write(
                        //        //Html.DevExpress().HyperLink("Novi predračun", "CreateAndEdit", new { Id = 0 }).ToHtmlString()
                        //        //);
                        //        Html.DevExpress().Button(settingsBut =>
                        //            {
                        //                settingsBut.Name = "addNevItem";
                        //                settingsBut.Text = "Novi";
                        //                settingsBut.ClientSideEvents.Click = "NoviClick";
                        //            }).GetHtml()
                                    
                        //            );
                             
                           
                        //});
                        settings.CommandColumn.SetHeaderTemplateContent(c =>
                        {
                            ViewContext.Writer.Write(
                                Html.DevExpress().HyperLink(settingsHy => { settingsHy.Name = "addNewPaymentItemsCol"; settingsHy.Properties.ImageUrl = @Url.Content("~/Content/images/pls_dodaj_16.png"); settingsHy.Properties.Text = "Dodaj"; settingsHy.Properties.ClientSideEvents.Click = "function NoviCLick(s, e) {gvPaymentItemsCol.AddNewRow(); }"; }).GetHtml());
                        });
                        
                        settings.CallbackRouteValues = new { Controller = "Payments", Action = "RefreshPaymentItemsColGridPartial" };
                        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Payments", Action = "AddNewItem" };
                        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Payments", Action = "UpdateItem" };
                        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Payments", Action = "DeleteItem" };
                        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
                        settings.SettingsBehavior.ConfirmDelete = true;
                        settings.SettingsBehavior.AllowFocusedRow = true;

                        settings.CommandColumn.Visible = true;
                        settings.CommandColumn.NewButton.Visible = false;
                        settings.CommandColumn.NewButton.Text = "Novi";
                        settings.CommandColumn.DeleteButton.Visible = true;
                        settings.CommandColumn.DeleteButton.Text = "Obriši";
                        settings.CommandColumn.EditButton.Visible = true;
                        settings.CommandColumn.EditButton.Text = "Uredi";
                        settings.CommandColumn.CancelButton.Text="Odustani";
                        settings.CommandColumn.UpdateButton.Text = "Prihvati";
                        settings.CommandColumn.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
                        settings.CommandColumn.DeleteButton.Image.Url = @Url.Content("~/Content/images/pls_brisi_16.png");
                        settings.CommandColumn.DeleteButton.Image.ToolTip = "Obriši";
                        settings.CommandColumn.UpdateButton.Image.Url = @Url.Content("~/Content/images/pls_snimi_16.png");
                        settings.CommandColumn.UpdateButton.Image.ToolTip = "Snimi";
                        settings.CommandColumn.CancelButton.Image.Url = @Url.Content("~/Content/images/pls_zatvori_16.png");
                        settings.CommandColumn.CancelButton.Image.ToolTip = "Odustani";
                        settings.CommandColumn.EditButton.Image.Url = @Url.Content("~/Content/images/pls_uredi_16.png");
                        settings.CommandColumn.EditButton.Image.ToolTip = "Uredi";
                        settings.Settings.ShowPreview = true;
                        settings.PreviewFieldName = "Description";
                        settings.CommandColumn.ClearFilterButton.Visible = true;

                        settings.CommandColumn.Width = 30;
                        
                        settings.KeyFieldName = "Ordinal";

                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "Ordinal";
                            column.ReadOnly = true;
                            column.Caption = "Rb";
                            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
                            column.Width = 16;
                            var spinEditProperties = column.PropertiesEdit as SpinEditProperties;

                            spinEditProperties.AllowNull = false;
                            spinEditProperties.DecimalPlaces = 0;
                            spinEditProperties.DisplayFormatString = "n0";
                            spinEditProperties.DisplayFormatInEditMode = true;
                            spinEditProperties.MinValue = 0;
                            spinEditProperties.SpinButtons.ShowIncrementButtons = false;
                            spinEditProperties.Width = 16;
                        });
                        
                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "SubjectBuyerId";
                            column.Caption = "Kupac";
                            column.Width = 160;
                            var items = contextSubjects.MDSubjects_Subject.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && p.SubjectType != (short)BusinessObjects.Common.SubjectType.Employee);

                            column.ColumnType = MVCxGridViewColumnType.ComboBox;

                            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;

                            comboBoxProperties.Height = 20;
                            comboBoxProperties.DataSource = items;
                            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                            comboBoxProperties.FilterMinLength = 0;
                            comboBoxProperties.TextField = "Name";
                            comboBoxProperties.ValueField = "Id";
                            comboBoxProperties.ValueType = typeof(int);
                            comboBoxProperties.Width = 160;

                            comboBoxProperties.ClientSideEvents.SelectedIndexChanged = "BuyerIndexChanged";
                        });

                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "SubjectSupplierId";
                            column.Caption = "Dobavljač";
                            column.Width = 160;
                            var items = contextSubjects.MDSubjects_Subject.Where(p => p.CompanyUsingServiceId == ((BusinessObjects.Security.PTIdentity)Csla.ApplicationContext.User.Identity).CompanyId && p.SubjectType != (short)BusinessObjects.Common.SubjectType.Employee);

                            column.ColumnType = MVCxGridViewColumnType.ComboBox;

                            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;

                            comboBoxProperties.Height = 20;
                            comboBoxProperties.DataSource = items;
          
                            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                            comboBoxProperties.FilterMinLength = 0;
                            comboBoxProperties.TextField = "Name";
                            comboBoxProperties.ValueField = "Id";
                            comboBoxProperties.ValueType = typeof(int);
                            comboBoxProperties.Width = 160;
                            comboBoxProperties.ConvertEmptyStringToNull = true;

                            comboBoxProperties.ClientSideEvents.SelectedIndexChanged = "SupplierIndexChanged";
                        });

                        settings.Columns.Add(column =>
                        {
                            column.FieldName = "Id";
                            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
                            column.Visible = false;

                            var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
                            spinEditProperties.NullText = "0";
                            
                          
                        });

                        settings.Columns.Add(column =>
                        {

                            column.FieldName = "Ammount";
                            column.Caption = "Iznos";
                            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

                            column.Width = 95;

                            var spinEditProperties = column.PropertiesEdit as SpinEditProperties;

                            spinEditProperties.AllowNull = false;
                            spinEditProperties.DecimalPlaces = 2;
                            spinEditProperties.MinValue = 0;
                            spinEditProperties.SpinButtons.ShowIncrementButtons = false;
                            spinEditProperties.Width = 95;
                            spinEditProperties.ClientSideEvents.Validation = "ItemAmmountValidation";
                            column.SetDataItemTemplateContent(c =>
                            {
                                Html.DevExpress().SpinEdit(spinSettings =>
                                {
                                    spinSettings.Name = "Ammount" + c.KeyValue;
                                    spinSettings.Width = 95;
                                    spinSettings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
                                    spinSettings.ReadOnly = true;
                                    spinSettings.Properties.SpinButtons.ShowIncrementButtons = false;
                                    spinSettings.Properties.DisplayFormatString = "c";
                                    spinSettings.Properties.AllowNull = false;
                                    spinSettings.Properties.Style.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
                                    //var sum = Model.First(p => p.Ordinal == (int)c.KeyValue).Documents_PaymentClosureGCol.Sum(r => r.Ammount);
                                    //if ((decimal)DataBinder.Eval(c.DataItem, c.Column.FieldName)< sum)
                                    //{
                                    //    spinSettings.ControlStyle.BackColor = System.Drawing.Color.Red;
                                    //}
                                    //else
                                    //{
                                    //    spinSettings.ControlStyle.BackColor = System.Drawing.Color.Transparent;
                                    //}
                                    spinSettings.ControlStyle.BackColor = System.Drawing.Color.Transparent;
                                    spinSettings.ControlStyle.Border.BorderColor = System.Drawing.Color.Transparent;
                                    //spinSettings.Properties.ClientSideEvents.ValueChanged = String.Format("function(s,e) {{ OnPaymentValueChanged(s, '{0}', {1}, '{2}', '{3}', '{4}') }}" ,
                                    //c.Column.FieldName, c.KeyValue, (c.Grid.GetRowValuesByKeyValue(c.KeyValue, "RetailValue")).ToString().Replace(",", "."), (c.Grid.GetRowValuesByKeyValue(c.KeyValue, "PayedTillDocument")).ToString().Replace(",", "."), Url.Action("UpdateValue", "Payments", new { area = "Documents" }));
                                    //spinSettings.Properties.ClientSideEvents.ValueChanged = String.Format("function(s,e) {{ OnPaymentValueChanged(s, '{0}', {1}, '{2}') }}",
                                    // c.Column.FieldName, c.KeyValue, Url.Action("UpdateValue", "Payments", new { area = "Documents" }));

                                    //spinSettings.Properties.MaxValue = ((decimal)c.Grid.GetRowValuesByKeyValue(c.KeyValue, "RetailValue") - (decimal)c.Grid.GetRowValuesByKeyValue(c.KeyValue, "PayedTillNow") + (decimal)c.Grid.GetRowValuesByKeyValue(c.KeyValue, "Payed"));
                                
                                }).Bind(DataBinder.Eval(c.DataItem, c.Column.FieldName)).GetHtml();
                            });
                            //column.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

                        });

                          //  settings.Columns.Add(column =>
                          //{
                          //    column.FieldName = "Ammount";
                          //    column.Caption = "Iznos";
                          //    column.ColumnType = MVCxGridViewColumnType.SpinEdit;
                          //    column.Width = 100;
                          //    var spinEditProperties = column.PropertiesEdit as SpinEditProperties;

                          //    spinEditProperties.AllowNull = false;
                          //    spinEditProperties.DecimalPlaces = 2;
                          //    spinEditProperties.DisplayFormatString = "c";
                          //    spinEditProperties.DisplayFormatInEditMode = false;
                          //    spinEditProperties.MinValue = 0;
                          //    spinEditProperties.SpinButtons.ShowIncrementButtons = false;
                          //    spinEditProperties.Width = 100;
                          //});

                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "InAdvance";
                                column.Caption = "Avans";
                                column.Width = 40;


                                column.ColumnType = MVCxGridViewColumnType.CheckBox;

                                column.SetDataItemTemplateContent(c =>
                          {
                              Html.DevExpress().CheckBox(checkSettings =>
                               {
                                   checkSettings.Name = "InAdvance" + c.KeyValue.ToString();
                                   checkSettings.Width = 40;
                                   checkSettings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
                                   checkSettings.Properties.AllowGrayed = false;
                                   checkSettings.Properties.ClientSideEvents.CheckedChanged = String.Format("function(s,e) {{ CheckStateChangedInLine(s, {0})}}",
                                     (c.KeyValue ?? 0));

                               }).Bind(DataBinder.Eval(c.DataItem, c.Column.FieldName)).GetHtml();
                          });
                                
                                
                                
                                //var checkBoxProperties = column.PropertiesEdit as CheckBoxProperties;

                                ////checkBoxProperties.ClientSideEvents.Init = "function(s, e) { if (s.GetValue() == null) s.SetValue(false); }";
                                ////checkBoxProperties.ClientSideEvents.CheckedChanged = "CheckStateChanged";
                                //checkBoxProperties.ValueType = typeof(bool);
                                //checkBoxProperties.AllowGrayed = false;

                              column.SetEditItemTemplateContent(c =>
                              {
                                   Html.DevExpress().CheckBox(checkSettings =>
                                    {
                                        checkSettings.Name = "InAdvanceEdit" + c.KeyValue;
                                        checkSettings.Width = 40;
                                        checkSettings.Properties.AllowGrayed = false;
                                        checkSettings.Properties.ClientSideEvents.CheckedChanged = String.Format("function(s,e) {{ CheckStateChanged(s, {0})}}",
                                        (c.KeyValue ?? 0));
                                    }).Bind(DataBinder.Eval(c.DataItem, c.Column.FieldName)).GetHtml();
                              });
                            });





                            settings.Columns.Add(column =>
                            {
                                column.FieldName = "IsInvoice";
                                column.Caption = "Nije račun";
                                column.Width = 40;
                                column.ColumnType = MVCxGridViewColumnType.CheckBox;

                                column.SetDataItemTemplateContent(c =>
                                {
                                    Html.DevExpress().CheckBox(checkSettings =>
                                    {
                                        checkSettings.Name = "IsInvoice" + c.KeyValue.ToString();
                                        checkSettings.Width = 40;
                                        checkSettings.Height = System.Web.UI.WebControls.Unit.Percentage(100);
                                        checkSettings.Properties.AllowGrayed = false;
                                        checkSettings.Properties.ClientSideEvents.CheckedChanged = String.Format("function(s,e) {{ CheckStateChangedInLine(s, {0})}}",
                                          (c.KeyValue ?? 0));

                                    }).Bind(DataBinder.Eval(c.DataItem, c.Column.FieldName)).GetHtml();
                                });

                                column.SetEditItemTemplateContent(c =>
                                {
                                    Html.DevExpress().CheckBox(checkSettings =>
                                    {
                                        checkSettings.Name = "IsInvoice" + c.KeyValue;
                                        checkSettings.Width = 40;
                                        checkSettings.Properties.AllowGrayed = false;
                                        //checkSettings.Properties.ClientSideEvents.CheckedChanged = String.Format("function(s,e) {{ CheckStateChanged(s, {0})}}",
                                        //(c.KeyValue ?? 0));
                                    }).Bind(DataBinder.Eval(c.DataItem, c.Column.FieldName)).GetHtml();
                                });
                            });
                        
                        
                        
                        
                        //settings.ClientSideEvents.BeginCallback = "function(s, e) { OnStartCallback(s, e); }";
                        //settings.ClientSideEvents.EndCallback = "function(s, e) { OnEndCallback(s, e); }";
                            settings.Columns.Add(column =>
                            {
                                column.Caption = "";
                                column.SetDataItemTemplateContent(c =>
                                {
                                    ViewContext.Writer.Write(
                                         "<a href=\"#\" onclick=\"GetDesc(" + DataBinder.Eval(c.DataItem, "Ordinal") + ")\">Napomena</a>"
                                     );
                                });
                                column.Settings.AllowDragDrop = DevExpress.Utils.DefaultBoolean.False;
                                column.Settings.AllowSort = DevExpress.Utils.DefaultBoolean.False;
                                column.Width = 40;
                            });
                        settings.ClientSideEvents.BeginCallback = "OnStartCallback";
                        settings.ClientSideEvents.EndCallback = "OnEndCallback";
                        
                            
                        settings.ClientSideEvents.FocusedRowChanged = "gvPaymentFocusedRowChanged";

                        //settings.PreRender = (sender, e) =>
                        //{
                        //    MVCxGridView gridView = sender as MVCxGridView;
                        //    if (gridView != null)
                        //        gridView.Selection.SelectRow(0);
                        //};   

                    });
   }
                  @grid.Bind(Model).GetHtml()